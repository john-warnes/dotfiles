#priority -50

# extends python

# We want to overwrite everything in parent ft.
priority 50

##################################################################
#                        Global Functions                        #
##################################################################
# This allways has to be python
global !p

# Load the user template
import csv
from os.path import expandvars
userfile = expandvars("$DOTFILES/vim/templates/personal.template.csv")
userinfo = reader = dict(csv.reader(open(userfile, mode='r')))

# Document string for argument list
def write_docstring_args(arglist, snip):
    args = str(arglist).split(',')

    if len(args) > 1:
        c = 0
        for arg in args:
            if c == 0:
                snip.rv += arg
                c = 1
            else:
                snip += '#         %s' % arg.strip()
    else:
        snip.rv = args[0]
endglobal


##################################################################
#                            Snippets                            #
##################################################################


snippet fun "Basic python doxygen function template"
def ${1:FunctionName}(${2:param}):
'''
 @brief  ${4:brief}
 @param  `!p write_docstring_args(t[2],snip)`
'''
    ${VISUAL:${0:pass}}


endsnippet

snippet while "while ...:"
while ${1:condition}:
    ${VISUAL:${0:pass}}
endsnippet

snippet if "if ... then (if)"
if ${1:condition}:
    ${VISUAL:${0:pass}}
endsnippet

snippet print "print(...)"
print(${1:"${2:...}"})$0
endsnippet

snippet for "for ... in ...:"
for ${1:item} in ${2:iterable}:
    ${VISUAL:${0:pass}}
endsnippet

snippet fori "for i in range(0,...):"
for i in range(${1:0},${2:10}):
    ${VISUAL:${0:pass}}
endsnippet

##################################################################
#                            template                            #
##################################################################
snippet _skel "cpp/hpp skeletion" b
#!/usr/bin/env python3
# ============================================================================
# @file   `!v expand('%:t')`
# @brief  ${1:Brief Description}
#
# @author `!p snip.rv = userinfo['AUTHOR']`
#
# @internal
#      Created  `!v strftime(g:Jvim#metadata#dateFormat)`
#     Modified  Monday, 11 December 2017
#     Revision  `!p snip.rv = '0'`
# Organization  `!p snip.rv = userinfo['ORGANIZATION']`
#      Company  `!p snip.rv = userinfo['COMPANY']`
#
# @Copyright  Copyright (c) `date +%Y`, `!p snip.rv = userinfo['AUTHOR']`
#
# @License
#   `!p snip.rv = userinfo['LICENSE1']`
#   `!p snip.rv = userinfo['LICENSE2']`
#=============================================================================

def main():
    """
    Test your module
    """
    ${0:pass}


if __name__ == "__main__":
    main()
    exit(0)

endsnippet


# vim:ft=snippets:
