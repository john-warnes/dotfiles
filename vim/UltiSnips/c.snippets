priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49

##################################################################
#                        Global Functions                        #
##################################################################
# This allways has to be python
global !p

# Load the user template
import csv
from os.path import expandvars
userfile = expandvars("$DOTFILES/vim/templates/personal.template.csv")
userinfo = reader = dict(csv.reader(open(userfile, mode='r')))

# Check if this is a header file
def isHeader():
    if (snip.fn.lower().endswith('.h') or snip.fn.lower().endswith('.hpp')):
        return True
    return False

# Document string for argument list
def write_docstring_args(arglist, snip):
    args = str(arglist).split(',')

    if len(args) > 1:
        c = 0
        for arg in args:
            if c == 0:
                snip.rv += arg
                c = 1
            else:
                snip += '*       : %s' % arg.strip()
    else:
        snip.rv = args[0]

endglobal

##################################################################
#                            Snippets                            #
##################################################################

snippet fun "Basic c doxygen function template" b
/**
* @brief  ${4:brief}
*
* @param  `!p write_docstring_args(t[3],snip)`
*
* @return `!p snip.rv = t[1]`
*/
${1:ReturnType} ${2:FunctionName}(${3:param})
{
  ${0:FunctionBody}
}
endsnippet


snippet if "if ... then (if)"
if ( ${1:condition} )
{
    ${0:#statements}
{
endsnippet


snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
    import random, string
    name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
    rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
    snip.rv = ('__%s_%s__' % (name,rand)).upper()
else:
    snip.rv = snip.c`}
#define $1

${0}

#endif /* $1 */
endsnippet


snippet dox "Doxygen general comment"
/*! ${1} */${2}
endsnippet


##################################################################
#                            template                            #
##################################################################
snippet _skel "c/h skeletion" b
/** ============================================================================
 *  @file   `!v expand('%:t')`
 *  @brief  ${1:Brief Description}
 *
 *  @author `!p snip.rv = userinfo['AUTHOR']`
 *
 *  @internal
 *       Created  `!v strftime(g:Jvim#metadata#dateFormat)`
 *      Modified  Friday, 17 November 2017
 *      Revision  1
 *      Compiler  ${3:gcc}
 *  Organization  `!p snip.rv = userinfo['ORGANIZATION']`
 *       Company  `!p snip.rv = userinfo['COMPANY']`
 *
 *  @Copyright  Copyright (c) `date +%Y`, `!p snip.rv = userinfo['AUTHOR']`
 *
 *  @License
 *    `!p snip.rv = userinfo['LICENSE1']`
 *    `!p snip.rv = userinfo['LICENSE2']`
 * =============================================================================
 */

`!p
if isHeader():
    snip.rv+='#ifndef __' + snip.fn.replace('.','_').upper() + '__\n'
    snip.rv+='#define __' + snip.fn.replace('.','_').upper() + '__\n'
else:
    snip.rv+='#define REVISION__ 0\n'
    vim.command("let g:Jvim#metadata#Date = strftime(g:Jvim#metadata#dateFormat) ")
    snip.rv+='#define MODIFIED__ "' + snip.opt('g:Jvim#metadata#Date') + '"\n'`
#include <stdlib.h>
#include <stdio.h>

$0

`!p
if isHeader():
    snip.rv += '#endif    // __' + snip.fn.replace('.','_').upper() + '__'`
endsnippet


# vim:ft=snippets:
