"=================================================================
"                             vimrc                              "
"=================================================================
" vim:foldmarker={,}:foldmethod=marker:
"=================================================================
"  Revision  1213
"  Modified  Tuesday, 23 October 2018
"=================================================================
scriptencoding utf-8
setlocal keywordprg=:help

" get current script path
let s:path = fnamemodify(resolve(expand('<sfile>:p')), ':h')

"=================================================================
" Set the Leader Key {
"=================================================================
let g:mapleader = ','
"} ===


"=================================================================
" jvim plugin options {
"=================================================================
let g:Jvim#vimopts#colorColumn        = 121 " Set long line guide
let g:Jvim#vimopts#useSystemClipboard = 1  " Try to use system clipboard

let g:Jvim#highlightRed = 'GruvboxRedBold' " Highlight to link for Red

let g:Jvim#hidden#showTrailing = 1 " Show Tailing Spaces
let g:Jvim#hidden#showEol      = 0 " Show EOL marker
let g:Jvim#hidden#showIndent   = 0 " Show indent guides when (F2 Toggles)
let g:Jvim#hidden#codePretty   = 1 " Replace some chars with alternatives (F2 Toggles)

let g:Jvim#presistentUndo#enable = 1 " Use persistent Undo
let g:Jvim#presistentUndo#dir    = expand($DOT_FILES.'/vim/undo') " Where to store persistent files

let g:Jvim#folding#syntax = 1 " Enable folding by syntax for all files
                              "  NOTE: Might be slow on older systems
let g:Jvim#folding#fold   = 3 " Folding Mode on File Open
                              " 0: none default vim
                              " 1: open all folds on file open
                              " 2: close all folds on file open
                              " 3: Auto save folds and reload them
                              "  NOTE: <t><t> in normal mode to toggle folds

let g:Jvim#quickFix#enable     = 0  " Enable auto resizing of the quick fix window
let g:Jvim#quickFix#heightMin  = 3  " Limit the MIN size of the quick fix window
let g:Jvim#quickFix#heightMax  = 10 " Limit the MAX size of the quick fix window

let g:Jvim#metadata#enable     = 1 " enable metadata auto update on file save
let g:Jvim#metadata#maxSearch  = 50 " Max lines at top of file to search for meta data tags
let g:Jvim#metadata#dateFormat = '%A, %d %B %Y' " Format for template and metadata dates (man date)

let g:Jvim#comment#enable      = 1 " Allow comment and uncomment system

let g:Jvim#vimstatus#enable    = 1 " Enable vimstatus status line
"} ===


"=================================================================
" Gnome-Terminal ONLY {
"=================================================================
execute 'source ' . s:path . '/' . 'gnometerm.vim'
" } ===


"===============================================================================
"= #### Plugin Options #### {
"===============================================================================

"=================================================================
" TagBar - Requires Exuberant Ctags
"=================================================================
let g:tagbar_width = 30             " width of tagnar window
nnoremap <C-t> :TagbarToggle<CR>    " Toggle Tagbar with Ctrl-T

"=================================================================
" gruvbox Color Scheme Options
"=================================================================
execute 'source ' . s:path . '/' . 'gruvbox_options.vim'

"} === #### Plugin Options END ####


"=================================================================
" cTags Command '<Leader>t' {
"=================================================================
nnoremap <Leader>t
            \ :silent execute '!(rm tags)'<CR>
            \ :silent execute '!(ctags-exuberant -R -f %:p:h/tags *)&'<CR>
            \ :redraw!<CR>
            \ :echom 'Generated cTags'<CR>
            \ execute 'set tags=./tags;~/.vim/tags;tags;'
set tags=./tags;~/.vim/tags;tags;
"} ===


"===============================================================================
"= #### Vim Settings #### {
"===============================================================================
set ttyfast          " Under testing
set lazyredraw       " Under testing

"=================================================================
" Vim Color Support Setup {
"=================================================================
function! JvimColorInfo()
    echoerr 'TERM =' . $TERM
    echoerr 'COLORTERM =' . $COLORTERM
    echoerr 'exist($TMUX) = ' . exists('$TMUX')
    echoerr 't_Co = ' . &t_Co
    echoerr 't_ut = ' . &t_ut
    echoerr '&t_8f = ' . &t_8f
    echoerr '&t_8b = ' . &t_8b
endfunction

if ($COLORTERM ==? 'truecolor')
    if has('termguicolors')
        set termguicolors

        if exists('$TMUX')
            let g:gruvbox_italic=0
            let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
            let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
        else
            let g:gruvbox_italic=1
        endif
        set t_ut=
    endif
else " No true color. Hope term has 256 colors
    let g:gruvbox_italic=0
    set t_Co=256
    set t_ut=
endif

if ($TERM ==? 'linux')
    " If Term is linux then we are in a 9 color environment
    let g:gruvbox_italic=0
    set t_Co=8
endif

if ($OS ==? 'OSX') && !has('nvim')
    let g:gruvbox_italic=0
    if ($TERM ==? 'screen' && $COLORTERM ==? 'truecolor')
        set t_Co=255
        set termguicolors
    endif
endif
"} ===


"=================================================================
" Vim Tmux Settings {
"=================================================================
if exists('$TMUX')
    map [1;5D <C-Left>
    map [1;5B <C-Down>
    map [1;5A <C-Up>
    map [1;5C <C-Right>
endif
"} ===


"=================================================================
" Vim Mouse Settings {
"=================================================================
    set mouse=a
"} ===


"=================================================================
" Vim Editing and Behavior {
"=================================================================
" For a paranoia.
" Normally `:set nocp` is not needed, because it is done automatically
" when .vimrc is found.
if &compatible
    " `:set nocp` has many side effects. Therefore this should be done
    " only when 'compatible' is set.
    set nocompatible           " Be vim
endif


filetype plugin indent on
if !has('nvim') && has('nolangremap')
    set nolangremap            " avoid mapping breaks
endif
set modeline                   " Files can use modeline(s)
set modelines=10               " Check top and bottom 10 lines for modelines(s)
set nobackup                   " No Backups
set nowritebackup              " No Backups even when editing
set noswapfile                 " Don't leave swap files
set printoptions=paper:letter,number:y,portrait:y " defualt printing
set shortmess+=aoOtT           " Abbrev. of messages (avoids 'hit enter')
set formatoptions+=cq          " Basic formatting of text and comments
set formatoptions-=t           " Don't automatically wrap text when typing
set wildmenu                   " Use the wildmenu
set wildmode=list:longest,full " Command <Tab> completion, list matches and,
                               "  complete the longest common part,
                               "  then, cycle through the matches
set wildchar=<Tab>             " Use tab to move in the menu
set backspace=2                " Set backspace
set backspace=indent,eol,start " Allow backspace over listed types
set nostartofline              " Stay on current char on page commands
set novisualbell               " Don't flash the screen
if exists('&belloff')
    set belloff=all            " Don't make beeps
endif

set scrolloff=1                " Use a 1 line (horizontal) scroll offset
set sidescrolloff=10           " Use a 5 column (virtual) scroll offset
set virtualedit=onemore        " Allow you to move the cursor to the newline
set termencoding=utf-8         " Lets try using Unicode
"} ===


"=================================================================
" Vim Look and Decorations {
"=================================================================
set ruler                   " Show the line / column number of cursor
set showcmd                 " Show current command virual selected char count
set number                  " Display line number"
set numberwidth=5           " Use 5 spaces for number column"
set textwidth=79            " Width of document (used by gd)
set nowrap                  " Don't automatically wrap on load
set commentstring=\ #\ %s   " This how fold markers look
set cursorline              " Highlight the current line
set visualbell              " Visual bell instead of beeping

" Changes the shape of the cursor depending on the current mode
if has('gui_running')
    set guicursor=n-v-c:block-Cursor
    set guicursor+=i:ver100-iCursor
    set guicursor+=n-v-c:blinkon0
    "set guicursor+=i:blinkwait10
else
"   let &t_SI = "\<Esc>[6 q"
"   let &t_SR = "\<Esc>[4 q"
"   let &t_EI = "\<Esc>[2 q"
endif
"} ===


"=================================================================
" Vim Search Options {
"=================================================================
set ignorecase              " Ignore case in search patterns
set noinfercase             " Don't ignore case in auto completion
                            "  but, do Ignore it in search patterns
set smartcase               " Don't ignore case if pattern contains it
set incsearch               " Show the 'best match so far'
set wrapscan                " Search will wrap around the file
set hlsearch                " Highlight all matches
"} ===


"=================================================================
" Vim Indent and Programming Options {
"=================================================================
"set autoindent              " Keep indent level on new line
"set nosmartindent           " Intelligent indenting for source code
set cindent                 " Intelligent indenting for source code
"set cinkeys=0{,0},!^F,o,O,e " Default is: 0{,0},0),:,0#,!^F,o,O,e
set cinoptions=N-s
set noshowmatch               " Show matching brackets / parenthesis
set matchtime=0            " Show matching character for 5s
set shiftwidth=4            " Spaces used for auto indents
set tabstop=4               " Set the tab width to 4
set softtabstop=4           " Spaces that a tab moves over
set expandtab               " Insert spaces when using the Tab key
set smarttab                " Allow Tab to match previous line
syntax enable               " Syntax Highlighting by default
"} ===


"=================================================================
" Vim Mappings and Keybindings {
"=================================================================
" zM   "Close all folds
" zR   "Open all folds

" Easier moving between tabs
nnoremap <Leader>n <Esc>:tabprevious<CR>
nnoremap <Leader>m <Esc>:tabnext<CR>

" Sort visual mode selected lines
vnoremap <Leader>s :sort<CR>

nnoremap <C-n> <Esc>:nohl<CR>   " Remove highlight from search

" mac os make <FN+Arrows> work as CTRL+Arrows
if has('macunix')
    map <ESC>[5~ <C-Up>
    map <ESC>[6~ <C-Down>
    map <ESC>OH <C-Left>
    map <ESC>OF <C-Right>
endif

" Map <NUL> and <C-@> as Control-Space as it commonly is
" Allow remapping
if !has('nvim')
    imap <NUL> <C-Space>
    imap <C-@> <C-Space>
endif
"} ===

"} === #### Vim Settings END #####


"=================================================================
" Load plugins {
"=================================================================
if has('nvim')
    execute 'source ' . s:path . '/' . 'nvim/nvim.vim'
elseif ( has('job') && has('packages') )
    execute 'source ' . s:path . '/' . 'vim8/vim8.vim'
else
    execute 'source ' . s:path . '/' . 'vim7/vim7.vim'
endif

silent! colorscheme gruvbox " Sometime other plugins will reset the colorscheme so set it at the end once more
"} ===

" EOF != <= >= x^2 y^3 1^2 pi 44^2 pie
