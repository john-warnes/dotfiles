"                   (_)_   _(_)_ __ ___  _ __ ___                 "
"                   | \ \ / / | '_ ` _ \| '__/ __|                "
"                   | |\ V /| | | | | | | | | (__                 "
"                  _/ | \_/ |_|_| |_| |_|_|  \___|                "
"                 |__/                                            "
"=================================================================
" Local file settings {
"=================================================================
set encoding=utf-8
scriptencoding utf-8
setlocal foldmarker={,}
setlocal foldmethod=marker
setlocal foldcolumn=1
setlocal keywordprg=:help
" } ===


"=================================================================
" Notes {
"=================================================================
" run make without changing files on eorror and open list
"       :make! | copen
" } ===


"=================================================================
" Leader Key {
"=================================================================
" Rebind <Leader> key
" I like to have it here because it is easier to reach than the default and
" it is next to ``m`` and ``n`` which I use for navigating between tabs.
let g:mapleader = ','
"} ===


"=================================================================
" Gnome-Terminal Font Control  Note: Only Gnome-Terminal {
"=================================================================
" <F7> cycle though mono powerline fonts
let g:powerlineFonts= [
            \'DejaVu Sans Mono for Powerline',
            \'Droid Sans Mono for Powerline',
            \'Droid Sans Mono Dotted for Powerline',
            \'Droid Sans Mono Slashed for Powerline',
            \'Fria Mono for Powerline'
            \'Go Mono for Powerline',
            \'Hack',
            \'Inconsolata for Powerline',
            \'Inconsolata-dz for Powerline',
            \'Inconsolata-g for Powerline',
            \'Literation Mono Powerline',
            \'Monofur for Powerline',
            \'Noto Mono for Powerline',
            \'NovaMono for Powerline',
            \'Roboto Mono for Powerline',
            \'Space Mono for Powerline'
            \'Ubuntu Mono derivative Powerline',
            \]

let g:font='DejaVu Sans Mono for Powerline'
if has('gui_running')
    set guifont=DejaVu\ Sans\ Mono\ for\ Powerline
endif
let g:fontsize='11'

function! GnomeTermSetFont()
    call system ("dconf write /org/gnome/terminal/legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9/font \"\'" . g:font . ' ' . g:fontsize . "\'\"")
endfunction

function! GnomeTermCycleFont()
    call add(g:powerlineFonts, g:font)
    let g:font = get(g:powerlineFonts,0,'mono')
    let g:powerlineFonts=g:powerlineFonts[1:]
    call system ("dconf write /org/gnome/terminal/legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9/font \"\'" . g:font . ' ' . g:fontsize . "\'\"")
    echom g:font
endfunction

" Cycle fonts with Gnome Terminal
nnoremap <F7> :call GnomeTermCycleFont()<CR>
"} ===


"=================================================================
" Vim-Plug Plugin Manager Auto Install {
"=================================================================
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    augroup plugmanager
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC | q
    augroup end
endif
"} ===


"=================================================================
" Vim Color Support and Force {
"=================================================================
if ($COLORTERM ==? 'truecolor')
    if has('termguicolors')
        set termguicolors
    endif
    if exists('$TMUX')
        let g:gruvbox_italic=0
        set t_ut=
    else
        let g:gruvbox_italic=1
        set t_ut=
    endif
else
    " No true color. Hope term has 256 colors
    let g:gruvbox_italic=0
    set term=xterm-256color
    set t_Co=256
    set t_ut=
    "    set t_ut=set
    "    set t_ut=y
endif

if ($TERM ==? 'linux')
    " If Term is linux then we are in a 9 color environment
    let g:gruvbox_italic=0
    set t_Co=8
endif

if has('macos')
    let g:gruvbox_italic=0
endif

if has('mac')
    let g:gruvbox_italic=0
endif
"} ===




"=================================================================
"{=#######################= START Plugin =########################
"=================================================================
call plug#begin('~/.vim/bundle')


"=================================================================
" jvim plugin options {
"=================================================================
let g:JV_showEol=1       " Show EOL marker
let g:JV_codePretty = 1  " Show indent guides when
Plug 'john-warnes/jvim'
"} ===


"=================================================================
" NerdTree to see files in tree mode {
"=================================================================
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
" Activate with Ctrl-B
nnoremap <C-b> :NERDTreeToggle<CR>
let g:NERDTreeQuitOnOpen=0          " close NERDTree after  file is opened
let g:NERDTreeShowHidden=1          " show hidden files in NERDTree
let g:NERDTreeWinSize=20
let g:NERDTreeMapOpenInTab='<ENTER>'  " Open file in newtab
"} ===


"=================================================================
" NerdTree git plugin {
"=================================================================
"Show git file status when browsing
Plug 'Xuyuanp/nerdtree-git-plugin'
let g:NERDTreeIndicatorMapCustom = {
            \ 'Modified'  : '✹',
            \ 'Staged'    : '✚',
            \ 'Untracked' : '✭',
            \ 'Renamed'   : '➜',
            \ 'Unmerged'  : '═',
            \ 'Deleted'   : '✖',
            \ 'Dirty'     : '✗',
            \ 'Clean'     : '✔︎',
            \ 'Ignored'   : '☒',
            \ 'Unknown'   : '?'
            \ }
"let g:NERDTreeShowIgnoredStatus = 1 "Heavy feature can be SLOW
"} ===


"=================================================================
" ALE Syntax Checking Plugin {
"=================================================================
if has('job') && has ('timers')

    Plug 'w0rp/ale'
    set noshowmode
    let g:airline#extensions#ale#enabled = 1
"    let g:ale_sign_column_always = 1
    let g:ale_sign_error = '>>'
    let g:ale_sign_warning = '--'
    let g:ale_history_log_output=1  " use ALEInfo to see the full output if needed

    " Write this in your vimrc file
    "let g:ale_set_loclist = 1
    "let g:ale_set_quickfix = 1
    "let g:ale_open_list = 1
    " Set this if you want to.
    " This can be useful if you are combining ALE with
    " some other plugin which sets quickfix errors, etc.
    "let g:ale_keep_list_window_open = 0

else
    "=================================================================
    " Syntastic Syntax checking Plugin
    "=================================================================
    " Use :Erorrs to open location-list :lclose
    " :lnext and :lprevious
    Plug 'vim-syntastic/syntastic'
    "set statusline+=%#warningmsg#
    "set statusline+=%{SyntasticStatuslineFlag()}
    "set statusline+=%*

    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 0
    let g:syntastic_check_on_wq = 0
    let g:syntastic_mode_map = {
                \ 'mode': 'active',
                \ 'passive_filetypes': ['python'] }
    nnoremap <C-F8> :SyntasticToggleMode<CR>
    nnoremap <F8> :SyntasticCheck<CR>
endif

augroup signcolumn
    autocmd!
    autocmd ColorScheme Gruvbox highlight clear SignColumn
augroup end
"} ===


"=================================================================
" Airline Status Line and TmuxLine {
"=================================================================

let g:airline#extensions#tagbar#enabled = 0 " Tagbar plugin is slow disable it
Plug 'vim-airline/vim-airline'              " Airline plugin
Plug 'vim-airline/vim-airline-themes'       " Many Airline themes
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline_section_c = '%F'              " Show full Path if possable

" let g:airline_theme='base16'       " Pick a theme
" let g:airline_theme='murmur'       " or
" let g:airline_theme='powerlineish' " or

let g:airline#extensions#tabline#enabled = 1     " Tabline support
let g:airline#extensions#tmuxline#enabled = 1    " Airline support for tmux
let g:airline#extensions#tmuxline#color_template = 'insert'
Plug 'edkolev/tmuxline.vim'     " Allows Airline to theme tmux bar
"} ===


"=================================================================
" Fugitive for GIT {
"=================================================================
" Try ":Gpush :Gdiff when file in reposory is open
" Plug 'tpope/vim-fugitive'
" Allow :Gbrowse for github and other github support
" Plug 'tpope/vim-rhubarb'
"} ===


"=================================================================
" Language Support {
"=================================================================
"let g:C_CreateMenusDelayed = 'yes'
"let g:C_MapLeader  = ','
"Plug 'WolfgangMehner/c-support'
"
"let g:C_UseToolbox = 'yes'
"let g:C_UseTool_doxygen = 'yes'
"let g:C_UseTool_cmake = 'yes'
"
"Plug 'WolfgangMehner/bash-support'
"let g:Bash_MapLeader  = ','
"Plug 'WolfgangMehner/latex-support'
"let g:Latex_MapLeader  = ','
"Plug 'WolfgangMehner/lua-support'
"let g:Lua_MapLeader  = ','
"Plug 'WolfgangMehner/perl-support'
"let g:Perl_MapLeader  = ','
"Plug 'WolfgangMehner/vim-support'
"let g:Vim_MapLeader  = ','
"Plug 'WolfgangMehner/python-support'
"let g:Python_MapLeader  = ','
"} ===


"=================================================================
" Python mode {
"=================================================================
Plug 'python-mode/python-mode'
"Template
augroup Python
    autocmd!
    autocmd BufNewFile *.py silent! 0r ~/.vim/templates/python-mode.template | cal cursor(8,4)
augroup END
"} ===


"=================================================================
" Super tab completion {
"=================================================================
"Plug 'ervandew/supertab'
"} ===


"=================================================================
" completion {
"=================================================================

if has('nvim')
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }

    Plug 'zchee/deoplete-clang'
    Plug 'Shougo/neco-vim'
    Plug 'Shougo/neco-syntax'
else
    if has('job') && has('timers') && has('python3')
        Plug 'Shougo/deoplete.nvim'
        Plug 'roxma/nvim-yarp'
        Plug 'roxma/vim-hug-neovim-rpc'

        Plug 'zchee/deoplete-clang'
        Plug 'Shougo/neco-vim'
        Plug 'Shougo/neco-syntax'
    endif
endif

if has('macos') || has('mac')
    echom "vimrc needs the location of libclang.dylib run 'mdfind -name libclang.dylib'"
    let g:deoplete#sources#clang#libclang_path=""
    let g:deoplete#sources#clang#clang_header=""
else
    let g:deoplete#sources#clang#libclang_path="/usr/lib/llvm-4.0/lib/libclang.so.1"
    let g:deoplete#sources#clang#clang_header="/usr/lib/llvm-4.0/"
    " Use deoplete.
endif

let g:deoplete#enable_yarp = 1
" Use deoplete.
let g:deoplete#enable_at_startup = 1
"set completeopt+=noinsert
set shortmess+=c


function! s:check_back_space() abort "{{{
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction"}}}

inoremap <silent><expr> <TAB>
            \ pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<TAB>" :
            \ deoplete#mappings#manual_complete()

"if has('nvim')
"    Plug 'roxma/nvim-completion-manager'
"
"    Plug 'roxma/ncm-clang'
"    Plug 'Shougo/neoinclude.vim'
"    Plug 'Shougo/neco-vim'
"else
"    if has('job') && has('timers') && has('python3')
"        Plug 'roxma/vim-hug-neovim-rpc'
"        Plug 'roxma/nvim-completion-manager'

"        Plug 'roxma/ncm-clang'
"        Plug 'Shougo/neoinclude.vim'
"        Plug 'Shougo/neco-vim'
"    endif
"endif

"inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
"inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

"imap <expr> <CR>  (pumvisible() ?  "\<c-y>\<Plug>(expand_or_nl)" : "\<CR>")
"imap <expr> <Plug>(expand_or_nl) (cm#completed_is_snippet() ? "\<C-U>":"\<CR>")

"} ===

"=================================================================
" TagBar - Requires Exuberant Ctags {
"=================================================================
" Activate with TagbarOpen or Ctrl-T
Plug 'majutsushi/tagbar'
nnoremap <C-t> :TagbarToggle<CR>
"map <Leader>y :TagbarToggle<CR>
nnoremap <silent><C-]> <C-w><C-]><C-w>T
let g:tagbar_width = 30
" } ===


"=================================================================
" cTags {
"=================================================================
"let g:gen_tags#ctags_auto_gen = 1
let g:gen_tags#verbose = 1
let g:gen_tags#use_cache_dir = 0

let g:loaded_gentags#gtags = 1

Plug 'jsfaint/gen_tags.vim'


nnoremap <Leader>t :GenCtags<CR>


"nnoremap <Leader>t
"            \ :silent execute '!(rm tags)'<CR>
"            \ :silent execute '!(ctags-exuberant -R -f %:p:h/tags *)&'<CR>
"            \ :redraw!<CR>
"            \ :echom 'Generating cTags'<CR>
"            \ execute 'set tags=./tags;~/.vim/tags;tags;'
"set tags=./tags;~/.vim/tags;tags;
"} ===


"} ===


"=================================================================
" gruvbox colorschene {
"=================================================================
Plug 'morhetz/gruvbox'
" let g:gruvbox_italic=0
" F5 to switch from dark to light
" F6 to cycle the 3 levels of contrast

function! GruvCycleContrast()
    if &background ==? 'dark'
        if g:gruvbox_contrast_dark ==? 'soft'
            let g:gruvbox_contrast_dark='medium'
        elseif g:gruvbox_contrast_dark ==? 'medium'
            let g:gruvbox_contrast_dark='hard'
        elseif g:gruvbox_contrast_dark ==? 'hard'
            let g:gruvbox_contrast_dark='soft'
        endif
    else
        if g:gruvbox_contrast_light ==? 'soft'
            let g:gruvbox_contrast_light='medium'
        elseif g:gruvbox_contrast_light ==? 'medium'
            let g:gruvbox_contrast_light='hard'
        elseif g:gruvbox_contrast_light ==? 'hard'
            let g:gruvbox_contrast_light='soft'
        endif
    endif
    colorscheme gruvbox
endfunction

" highlight the current line
set cursorline

"mapping for changing contrast and background colors
nnoremap <silent> <F5> :let &background = ( &background == "dark"? "light" : "dark" )<CR>
nnoremap <silent> <F6> :call GruvCycleContrast()<CR>

"} ===


"=================================================================
" TMUX integration {
"=================================================================
" <Ctrl + [h,j,k,l]> Move to vim panes and tmux widows
Plug 'christoomey/vim-tmux-navigator'
"} ===


"=================================================================
" Code Snippets {
"=================================================================
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger='<Nul>'
let g:UltiSnipsJumpForwardTrigger='<Nul>'
let g:UltiSnipsJumpBackwardTrigger='<C-S-d>'
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit='vertical'
" Track the engine.
Plug 'SirVer/ultisnips'
" Snippets are separated from the engine. Add this if you want them:
Plug 'honza/vim-snippets'
"} ===


"=================================================================
" Start Screen and Session Management {
"=================================================================
" :SLoad    load a session
" :SSave    save a session
" :SDelete  delete a session
" :SClose   close current session
"

let g:startify_fortune_use_unicode = 1
let g:startify_session_persistence = 0
let g:startify_bookmarks = [ {'c': '~/.vimrc'} ]
Plug 'mhinz/vim-startify'
"} ===


"=================================================================
" Tabular Test Alignment Tool {
"=================================================================
" :Tab /<char> to align on <char> SLoad
Plug 'godlygeek/tabular'
"} ===



"=================================================================
" Vim Startup Time Profiler run  :StartupTime {
"=================================================================
Plug 'tweekmonster/startuptime.vim'
"} ===

"=================================================================
"=####################= END Plugin System =######################=
"=================================================================
call plug#end()
"} ===

"=================================================================
" Color Scheme {
"=================================================================
" mkdir -p ~/.vim/colors && cd ~/.vim/colors
" wget -O wombat256mod.vim http://www.vim.org/scripts/download_script.php?src_id=13400
if has('gui_running')
    set background=light
else
    set background=dark
endif

" colorscheme wombat256mod
" colorscheme default
silent! colorscheme gruvbox " colorscheme support truecolor
"} ===


"=================================================================
" Behavior {
"=================================================================
set nowritebackup              " only in case you don't want a backup file while editing
set noswapfile                 " no swap files
set nobackup                   " Just overwrite the file
set printoptions=paper:letter,number:y,portrait:y
set shortmess+=filmnrxoOtT     " Abbrev. of messages (avoids 'hit enter')
set formatoptions+=tcq         " Basic formatting of text and comments
set wildmode=list:longest,full " Command <Tab> completion, list matches and
"  complete the longest common part, then,
"  cycle through the matches
set wildchar=<Tab>
"set wildchar=<Nul>
set mouse=a                    " on OSX press ALT and click
set backspace=2                       " Set backspace

"} ===



"=================================================================
" Editing {
"=================================================================
augroup reload_vimrc
    autocmd!
    autocmd! bufwritepost .vimrc,vimrc source % " Automatic reloading of .vimrc
augroup END

set backspace=indent,eol,start " Allow backspace over listed types
set nostartofline           " Stay on current char on page commands
set visualbell              " Don't beep, flash the screen instead
set scrolloff=1             " Use a 1 line (horizontal) scroll offset
set sidescrolloff=5         " Use a 5 Char (virtual) scroll offset
set virtualedit=onemore
set termencoding=utf-8
set wildmenu
set commentstring=\ #\ %s

"} ===


"=================================================================
" Status-line {
"=================================================================
set ruler                   " Show the line / column number of cursor
set showcmd                 " Show the partially completed command
set number                  " Display line number"
set textwidth=79            " width of document (used by gd)
set nowrap                  " don't automatically wrap on load
set formatoptions-=t        " don't automatically wrap text when typing
"} ===


"=================================================================
" Search {
"=================================================================
set ignorecase             " Ignore case in search patterns
set noinfercase              " Don't ignore case in auto completion
                           "  but do Ignore it in search patterns
set smartcase              " Don't ignore case if pattern contains it
set incsearch              " Show the 'best match so far'
set wrapscan               " Search will wrap around the file
set hlsearch               " Highlight all matches
"} ===


"=================================================================
" Programming {
"=================================================================
set autoindent                 " Keep indent level on new line
set nosmartindent              " Intelligent indenting for source code
set cindent                    " Intelligent indenting for source code
set cinkeys=0{,0},!^F,o,O,e    " default is: 0{,0},0),:,0#,!^F,o,O,e
set showmatch                  " Show matching brackets / parenthesis
set matchtime=5                " Show matching character for .3s
"} ===


"=================================================================
" Vertical indenting {
"=================================================================
set shiftwidth=4               " Number of spaces used for autoindents
set tabstop=4                  " Set the tab width to 4
set softtabstop=4
set expandtab
set textwidth=0
"} ===


"=================================================================
" Mappings and Keybindings {
"
"     Every unnecessary keystroke that can be saved is good for
"     your health :)
"=================================================================

" Mappings for 'n' 'm' and vim 'movement keys'
" easier moving between tabs
noremap <Leader>n <Esc>:tabprevious<CR>
noremap <Leader>m <Esc>:tabnext<CR>

"map sort function to a key
vnoremap <Leader>s :sort<CR>

" Removes highlight of your last search: CTRL+n
noremap <C-n> <Esc>:nohl<CR>
inoremap <C-n> <Esc>:nohl<CR>i

"set shortmess+=c


"} ===


"=================================================================
" Return to the last position in the file {
"=================================================================
augroup return_file_postion
    autocmd!
    au bufreadpost * if line("'\"") > 0 && line("'\"") <= line("$")
                \ | exe "normal g'\"" | endif
augroup END
"} ===


"=================================================================
" Shift-K Help support {
"=================================================================
augroup shift-K
    autocmd!
    autocmd FileType cpp set keywordprg=cppman
    autocmd FileType c set keywordprg=man\ -S3
augroup END
"} ===


"=================================================================
" UltiSnips FileType Templates {
"=================================================================
if !exists('g:UltiSnipsExpandTrigger')
    finish
endif

function! s:Try_insert(skel)
    execute "normal! i_" . a:skel . "\<C-r>=UltiSnips#ExpandSnippet()\<CR>\<ESC>"

    if (g:ulti_expand_res == 0)
        silent! undo
    endif

    return g:ulti_expand_res
endfunction

function! InsertSkeleton() abort
    let l:filename = expand('%')

    " Abort on non-empty buffer or extant file
    if !(line('$') ==? 1 && getline('$') ==? '') || filereadable(l:filename)
        return
    endif

    call s:Try_insert('skel')
endfunction

augroup ultisnips_custom
    autocmd!
    autocmd BufNewFile * silent! call InsertSkeleton()
augroup END

" } ===


"=================================================================
" Custom Start Screen {
"=================================================================
let g:ascii = [
            \ '     _       _                 _     _        ',
            \ '    (_)_   _(_)_ __ ___       (_) __| | ___   ',
            \ '    | \ \ / / | `_ ` _ \ _____| |/ _` |/ _ \  ',
            \ '    | |\ V /| | | | | | |_____| | (_| |  __/  ',
            \ '   _/ | \_/ |_|_| |_| |_|     |_|\__,_|\___|  ',
            \ '  |__/                                        ',
            \ '                                              '
            \ ]
let g:startify_custom_header = g:ascii + startify#fortune#boxed()
" http://patorjk.com/software/taag/#p=display&f=Ogre&t=jvim%0A
"} ===


