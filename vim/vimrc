"                             vimrc                              "
"=================================================================
set encoding=utf-8
scriptencoding utf-8
setlocal foldmarker={,}
setlocal foldmethod=marker
setlocal foldcolumn=1
setlocal keywordprg=:help
"=================================================================
" } ===

"=================================================================
" Notes {
"=================================================================
" run make without changing files on eorror and open list
"       :make! | copen
" } ===

"=================================================================
" Leader Key {
"=================================================================
" Rebind <Leader> key
" I like to have it here because it is easier to reach than the default and
" it is next to ``m`` and ``n`` which I use for navigating between tabs.
let g:mapleader = ','
"} ===


"=================================================================
" Gnome-Terminal Font Control  Note: Only Gnome-Terminal {
"=================================================================
" <F7> cycle though mono powerline fonts
let g:powerlineFonts= [
            \'DejaVu Sans Mono for Powerline',
            \'Droid Sans Mono for Powerline',
            \'Droid Sans Mono Dotted for Powerline',
            \'Droid Sans Mono Slashed for Powerline',
            \'Fria Mono for Powerline'
            \'Go Mono for Powerline',
            \'Hack',
            \'Inconsolata for Powerline',
            \'Inconsolata-dz for Powerline',
            \'Inconsolata-g for Powerline',
            \'Literation Mono Powerline',
            \'Monofur for Powerline',
            \'Noto Mono for Powerline',
            \'NovaMono for Powerline',
            \'Roboto Mono for Powerline',
            \'Space Mono for Powerline'
            \'Ubuntu Mono derivative Powerline',
            \]

let g:font='DejaVu Sans Mono for Powerline'
if has('gui_running')
    set guifont=DejaVu\ Sans\ Mono\ for\ Powerline
endif
let g:fontsize='11'

function! GnomeTermSetFont()
    call system ("dconf write /org/gnome/terminal/legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9/font \"\'" . g:font . ' ' . g:fontsize . "\'\"")
endfunction

function! GnomeTermCycleFont()
    call add(g:powerlineFonts, g:font)
    let g:font = get(g:powerlineFonts,0,'mono')
    let g:powerlineFonts=g:powerlineFonts[1:]
    call system ("dconf write /org/gnome/terminal/legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9/font \"\'" . g:font . ' ' . g:fontsize . "\'\"")
    echom g:font
endfunction

" Cycle fonts with Gnome Terminal
nnoremap <F7> :call GnomeTermCycleFont()<CR>
"} ===


"=================================================================
" Vim-Plug Plugin Manager Auto Install {
"=================================================================
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    augroup plugmanager
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC | q
    augroup end
endif
"} ===


"=================================================================
" Vim Color Support and Force {
"=================================================================
if ($COLORTERM ==? 'truecolor')
    if has('termguicolors')
        set termguicolors
    endif
    if exists('$TMUX')
        let g:gruvbox_italic=0
        set t_ut=
    else
        let g:gruvbox_italic=1
        set t_ut=
    endif
else
    " No true color. Hope term has 256 colors
    let g:gruvbox_italic=0
    set term=xterm-256color
    set t_Co=256
    set t_ut=
    "    set t_ut=set
    "    set t_ut=y
endif

if ($TERM ==? 'linux')
    " If Term is linux then we are in a 9 color environment
    let g:gruvbox_italic=0
    set t_Co=8
endif

if ($OS ==? 'OSX') && !has('nvim')
    let g:gruvbox_italic=0
endif

"} ===


"=================================================================
"= #######################= START Plugin =###################### {
"=================================================================
call plug#begin('~/.vim/bundle')


"=================================================================
" jvim plugin options {
"=================================================================
let g:JV_showTrailing = 1        " Show Tailing Spaces
let g:JV_showEol = 0             " Show EOL marker
let g:JV_usePresistent_Undo = 0  " Use persistent Undo
let g:JV_colorColumn = 81        " Set long line guide
let g:JV_red = 'GruvboxRedBold'  " Highlight link for Red
let g:JV_useSystemClipboard = 1  " Try to use system clipboard
let g:JV_IndentGuide = 0         " Show indent guides when (F2 Toggle)
let g:JV_codePretty =  1         " Replace some chars with alternatives (F2 Toggle)
let g:JV_quickFixHeightMin =  3  " Limit the MIN size of the quick fix window
let g:JV_quickFixHeightMax =  10 " Limit the MAX size of the quick fix window
let g:JV_foldingSyntax  = 0      " 1 = enable folding=syntax for all files
                                 " NOTE:Might be slow on older systems
let g:JV_foldingDefault = 0      " Folding Mode on File Open

Plug 'john-warnes/jvim'
"} ===


"=================================================================
" NerdTree to see files in tree mode {
"=================================================================
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
" Activate with Ctrl-B
nnoremap <C-b> :NERDTreeToggle<CR>
let g:NERDTreeQuitOnOpen=0          " close NERDTree after  file is opened
let g:NERDTreeShowHidden=1          " show hidden files in NERDTree
let g:NERDTreeWinSize=20
let g:NERDTreeMapOpenInTab='<ENTER>'  " Open file in newtab
"} ===


"=================================================================
" NerdTree git plugin {
"=================================================================
"Show git file status when browsing
Plug 'Xuyuanp/nerdtree-git-plugin'
let g:NERDTreeIndicatorMapCustom = {
            \ 'Modified'  : '✹',
            \ 'Staged'    : '✚',
            \ 'Untracked' : '✭',
            \ 'Renamed'   : '➜',
            \ 'Unmerged'  : '═',
            \ 'Deleted'   : '✖',
            \ 'Dirty'     : '✗',
            \ 'Clean'     : '✔︎',
            \ 'Ignored'   : '☒',
            \ 'Unknown'   : '?'
            \ }
"let g:NERDTreeShowIgnoredStatus = 1 "Heavy feature can be SLOW
"} ===


"=================================================================
" ALE Syntax Checking Plugin {
"=================================================================
if (has('job') && has('timers')) || has('nvim')
    Plug 'w0rp/ale'
    set noshowmode
    "    let g:ale_sign_column_always = 1
    let g:ale_sign_error = '>>'
    let g:ale_sign_warning = '--'
    let g:ale_history_log_output=1  " use ALEInfo to see the full output if needed

    " Write this in your vimrc file
    "let g:ale_set_loclist = 1
    "let g:ale_set_quickfix = 1
    "let g:ale_open_list = 1
    " Set this if you want to.
    " This can be useful if you are combining ALE with
    " some other plugin which sets quickfix errors, etc.
    "let g:ale_keep_list_window_open = 0
else
    "=================================================================
    " Syntastic Syntax checking Plugin
    "=================================================================
    " Use :Erorrs to open location-list :lclose
    " :lnext and :lprevious
    Plug 'vim-syntastic/syntastic'
    "set statusline+=%#warningmsg#
    "set statusline+=%{SyntasticStatuslineFlag()}
    "set statusline+=%*

    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 0
    let g:syntastic_check_on_wq = 0
    let g:syntastic_mode_map = {
                \ 'mode': 'active',
                \ 'passive_filetypes': ['python'] }
    nnoremap <C-F8> :SyntasticToggleMode<CR>
    nnoremap <F8> :SyntasticCheck<CR>
endif

augroup signcolumn
    autocmd!
    autocmd ColorScheme Gruvbox highlight clear SignColumn
augroup end
"} ===


"=================================================================
" Airline and TmuxLine {
"=================================================================
let g:airline#extensions#tagbar#enabled = 0 " Tagbar plugin is very slow disable it
Plug 'vim-airline/vim-airline'              " Airline plugin
Plug 'vim-airline/vim-airline-themes'       " Many Airline themes
set laststatus=2
let g:airline_powerline_fonts = 1
" let g:airline_section_c = '%F'              " Show full Path if possable

" let g:airline_theme='base16'       " Pick a theme
" let g:airline_theme='murmur'       " or
" let g:airline_theme='powerlineish' " or

let g:airline_detect_spell=0 " Don't show spell and language on status line

" Caches the changes to the highlighting groups, should therefore be faster.
"  Set this to one, if you experience a sluggish Vim
let g:airline_highlighting_cache = 1

let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tabline#enabled = 1     " Tabline support
let g:airline#extensions#tmuxline#enabled = 1    " Airline support for tmux
let g:airline#extensions#tmuxline#color_template = 'insert'
Plug 'edkolev/tmuxline.vim'     " Allows Airline to theme tmux bar
"} ===


"=================================================================
" OLD DISABLED PLUGINS {
"=================================================================

"=================================================================
" Fugitive for GIT {
"=================================================================
" Try ":Gpush :Gdiff when file in reposory is open
" Plug 'tpope/vim-fugitive'
" Allow :Gbrowse for github and other github support
" Plug 'tpope/vim-rhubarb'
"} ===


"=================================================================
" Language Support {
"=================================================================
"let g:C_CreateMenusDelayed = 'yes'
"let g:C_MapLeader  = ','
"Plug 'WolfgangMehner/c-support'
"
"let g:C_UseToolbox = 'yes'
"let g:C_UseTool_doxygen = 'yes'
"let g:C_UseTool_cmake = 'yes'
"
"Plug 'WolfgangMehner/bash-support'
"let g:Bash_MapLeader  = ','
"Plug 'WolfgangMehner/latex-support'
"let g:Latex_MapLeader  = ','
"Plug 'WolfgangMehner/lua-support'
"let g:Lua_MapLeader  = ','
"Plug 'WolfgangMehner/perl-support'
"let g:Perl_MapLeader  = ','
"Plug 'WolfgangMehner/vim-support'
"let g:Vim_MapLeader  = ','
"Plug 'WolfgangMehner/python-support'
"let g:Python_MapLeader  = ','
"} ===

"} ===


"=================================================================
" Python mode {
"=================================================================
Plug 'python-mode/python-mode'
"Template
augroup Python
    autocmd!
    autocmd BufNewFile *.py silent! 0r ~/.vim/templates/python-mode.template | cal cursor(8,4)
augroup END
"} ===


"=================================================================
" Completion Systems {
"=================================================================
"let g:JV_autocomplete = 1

if has('nvim')
    let g:JV_autocomplete = get(g:, 'JV_autocomplete', 1)
else
    let g:JV_autocomplete = get(g:, 'JV_autocomplete', 0) "currently not working in VIM8
endif

if (g:JV_autocomplete == 1)
            \ && (has('nvim') || (
            \ has('job') && has('timers') && has('python3') ) )

    if has('macunix')
        let g:deoplete#sources#clang#libclang_path='/Library/Developer/CommandLineTools/usr/lib/libclang.dylib'
        let g:deoplete#sources#clang#clang_header='/Library/Developer/CommandLineTools/usr/lib/clang'
    else
        let g:deoplete#sources#clang#libclang_path='/usr/lib/llvm-4.0/lib/libclang.so.1'
        let g:deoplete#sources#clang#clang_header='/usr/lib/llvm-4.0/lib/clang'
    endif

    if has('nvim')
        Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    else
        " let g:deoplete#enable_yarp = 1
        Plug 'roxma/nvim-yarp'
        Plug 'roxma/vim-hug-neovim-rpc' " Buged on VIM8 for linux
        Plug 'Shougo/deoplete.nvim'
    endif

    "Plug 'Shougo/neco-vim'
    "Plug 'Shougo/neco-syntax'
    "Plug 'Shougo/neoinclude.vim'

    "Plug 'zchee/deoplete-clang'

    let g:deoplete#enable_at_startup = 1  " Automagically use deoplete.
    let g:deoplete#enable_smart_case = 1  " Use smart case to find matches
    " set completeopt+=noinsert           \" Do not modify line inless selected
    " set completeopt-=menuone            \" Disable the complete menu for a single item
    set completeopt-=preview  " Disable the preview window

    " Use tab to cycle matches
    inoremap <silent><expr> <TAB>
                \ pumvisible() ? "\<C-n>" :
                \ <SID>check_back_space() ? "\<TAB>" :
                \ deoplete#mappings#manual_complete()

    function! s:check_back_space() abort "{{{
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~ '\s'
    endfunction"}}}
endif

" Fallbacks for not autocomplete
if (g:JV_autocomplete == 0) && !has('nvim')
    " Super tab completion
    " Plug 'ervandew/supertab'

    " Or super light VimCompletesMe'
    Plug 'ajh17/VimCompletesMe'
    autocmd! FileType text,markdown let b:vcm_tab_complete = 'dict'
endif
"} ===


"=================================================================
" TagBar - Requires Exuberant Ctags {
"=================================================================
" Activate with TagbarOpen or Ctrl-T
Plug 'majutsushi/tagbar'
nnoremap <C-t> :TagbarToggle<CR>
"map <Leader>y :TagbarToggle<CR>
"nnoremap <silent><C-]> <C-w><C-]><C-w>T
let g:tagbar_width = 30
" } ===


"=================================================================
" cTags {
"=================================================================
"let g:gen_tags#verbose = 1        " Give more feedback
let g:gen_tags#ctags_auto_gen = 1 " Auto generate ctags if in git
let g:gen_tags#use_cache_dir = 0  " Put tags in git or else home cache
let g:loaded_gentags#gtags = 1    " Disable gtags support
Plug 'jsfaint/gen_tags.vim'
nnoremap <Leader>t :GenCtags<CR>

"nnoremap <Leader>t
"            \ :silent execute '!(rm tags)'<CR>
"            \ :silent execute '!(ctags-exuberant -R -f %:p:h/tags *)&'<CR>
"            \ :redraw!<CR>
"            \ :echom 'Generating cTags'<CR>
"            \ execute 'set tags=./tags;~/.vim/tags;tags;'
"set tags=./tags;~/.vim/tags;tags;
"} ===


"=================================================================
" gruvbox colorschene {
"=================================================================
Plug 'morhetz/gruvbox'
" F5 to switch from dark to light
" F6 to cycle the 3 levels of contrast

function! GruvCycleContrast()
    if &background ==? 'dark'
        if g:gruvbox_contrast_dark ==? 'soft'
            let g:gruvbox_contrast_dark='medium'
        elseif g:gruvbox_contrast_dark ==? 'medium'
            let g:gruvbox_contrast_dark='hard'
        elseif g:gruvbox_contrast_dark ==? 'hard'
            let g:gruvbox_contrast_dark='soft'
        endif
    else
        if g:gruvbox_contrast_light ==? 'soft'
            let g:gruvbox_contrast_light='medium'
        elseif g:gruvbox_contrast_light ==? 'medium'
            let g:gruvbox_contrast_light='hard'
        elseif g:gruvbox_contrast_light ==? 'hard'
            let g:gruvbox_contrast_light='soft'
        endif
    endif
    colorscheme gruvbox
endfunction

"mapping for changing contrast and background colors
nnoremap <silent> <F5> :let &background = ( &background == "dark"? "light" : "dark" )<CR>
nnoremap <silent> <F6> :call GruvCycleContrast()<CR>
"} ===


"=================================================================
" TMUX integration and support {
"=================================================================
" <Ctrl + [h,j,k,l]> Move to vim panes and tmux widows
Plug 'christoomey/vim-tmux-navigator'

if exists('$TMUX')
    if !has('nvim')
        set ttymouse=xterm2
    endif
endif
"} ===


"=================================================================
" Code Snippets {
"=================================================================
let g:UltiSnipsExpandTrigger='<C-U>'
let g:UltiSnipsJumpForwardTrigger='<C-space>'
let g:UltiSnipsJumpBackwardTrigger='<C-S-d>'
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit='vertical'
" Track the engine.
Plug 'SirVer/ultisnips'
" Snippets are separated from the engine. Add this if you want them:
Plug 'honza/vim-snippets'
"} ===


"=================================================================
" Start Screen and Session Management {
"=================================================================
" :SLoad    load a session
" :SSave    save a session
" :SDelete  delete a session
" :SClose   close current session
let g:startify_fortune_use_unicode = 1
let g:startify_session_persistence = 0
let g:startify_bookmarks = [ {'v': '~/.vimrc'}, {'b': '~/.vim/bundle/jvim/plugin/jvim.vim'}]
Plug 'mhinz/vim-startify'
"} ===


"=================================================================
" Tabular Test Alignment Tool {
"=================================================================
" :Tab /<REGEX>
Plug 'godlygeek/tabular'
"} ===


"=================================================================
" Vim Startup Time Profiler run  :StartupTime {
"=================================================================
" Only enable when needed
" Plug 'tweekmonster/startuptime.vim'
"} ===

"=================================================================
"=####################= END Plugin System =######################=
"=================================================================
call plug#end()
"} ===

"=================================================================
" Color Scheme {
"=================================================================
set background=dark

"colorscheme default
silent! colorscheme gruvbox " colorscheme support truecolor
"} ===


"=================================================================
" Editing and Behavior {
"=================================================================
set nowritebackup              " only in case you don't want a backup file while editing
set noswapfile                 " no swap files
set nobackup                   " Just overwrite the file
set printoptions=paper:letter,number:y,portrait:y
set shortmess+=filmnrxoOtT     " Abbrev. of messages (avoids 'hit enter')
set formatoptions+=cq          " Basic formatting of text and comments
set formatoptions-=t           " Don't automatically wrap text when typing
set wildmenu                   " Use the wildmenu
set wildmode=list:longest,full " Command <Tab> completion, list matches and,
                               "  complete the longest common part,
                               "  then, cycle through the matches
set wildchar=<Tab>             " Use tab to move in the menu
set mouse=a                    " Use mouse in all modes
                               "  on OSX might have to press ALT and click
set backspace=2                " Set backspace
set backspace=indent,eol,start " Allow backspace over listed types
set nostartofline              " Stay on current char on page commands
set visualbell                 " Don't beep, flash the screen instead
set scrolloff=1                " Use a 1 line (horizontal) scroll offset
set sidescrolloff=10           " Use a 5 column (virtual) scroll offset
set virtualedit=onemore        " Allow you to move the cursor to the newline
set termencoding=utf-8         " Lets try using Unicode
"} ===


"=================================================================
" Editor Look and Decorations {
"=================================================================
set ruler                   " Show the line / column number of cursor
" set showcmd                 " Show the partially completed command
set number                  " Display line number"
set numberwidth=5           " Use 5 spaces for number column"
set textwidth=79            " Width of document (used by gd)
set nowrap                  " Don't automatically wrap on load
set formatoptions-=t        " Don't automatically wrap text when typing
set commentstring=\ #\ %s   " This how fold markers look
set cursorline              " Highlight the current line

if has('gui_running')
    set guicursor=n-v-c:block-Cursor
    set guicursor+=i:ver100-iCursor
    set guicursor+=n-v-c:blinkon0
    "set guicursor+=i:blinkwait10
else
    let &t_SI = "\<Esc>[6 q"
    let &t_SR = "\<Esc>[4 q"
    let &t_EI = "\<Esc>[2 q"
endif
"} ===


"=================================================================
" Search {
"=================================================================
set ignorecase              " Ignore case in search patterns
set noinfercase             " Don't ignore case in auto completion
                            "  but, do Ignore it in search patterns
set smartcase               " Don't ignore case if pattern contains it
set incsearch               " Show the 'best match so far'
set wrapscan                " Search will wrap around the file
set hlsearch                " Highlight all matches
"} ===


"=================================================================
" Programming {
"=================================================================
set autoindent              " Keep indent level on new line
set nosmartindent           " Intelligent indenting for source code
set cindent                 " Intelligent indenting for source code
set cinkeys=0{,0},!^F,o,O,e " Default is: 0{,0},0),:,0#,!^F,o,O,e
set showmatch               " Show matching brackets / parenthesis
set matchtime=5             " Show matching character for .3s
" } ===


"=================================================================
" Tabs {
"=================================================================
set shiftwidth=4            " Number of spaces used for autoindents
set tabstop=4               " Set the tab width to 4
set softtabstop=4           " Number of spaces a tab moves over
set expandtab               " Insert spaces when using the Tab key
"} ===


"=================================================================
" Mappings and Keybindings {
"=================================================================
" zM   "Close all folds
" zR   "Open all folds

" Mappings for <Leader> plus ''n'' ''m'' for tabs control
" easier moving between tabs
nnoremap <Leader>n <Esc>:tabprevious<CR>
nnoremap <Leader>m <Esc>:tabnext<CR>

"map sort function to <Leader> plus ''s'' key
vnoremap <Leader>s :sort<CR>

" Removes highlight of your last search: ''CTRL+n''
nnoremap <C-n> <Esc>:nohl<CR>
inoremap <C-n> <Esc>:nohl<CR>i

" mac os make ''FN+Arrows'' to work as CTRL+Arrows
if has('macunix')
    map <ESC>[5~ <C-Up>
    map <ESC>[6~ <C-Down>
    map <ESC>OH <C-Left>
    map <ESC>OF <C-Right>
endif

" Map ''NUL'' as control space
map <C-@> <C-space>
map <NUL> <C-space>

if (g:JV_autocomplete==1)
    " <CR>: Close popup, expand snippets or just do <CR>
    inoremap <silent> <CR> <C-r>=<SID>cr_function()<CR>
    function! s:cr_function() abort
        if (pumvisible())
            return deoplete#close_popup() . "\<C-r>=UltiSnips#ExpandSnippet()\<CR>\<ESC>"
        else
            return "\<CR>"
        endif
    endfunction
endif
"} ===


"=================================================================
" Return to the last position in the file {
"=================================================================
augroup return_file_postion
    autocmd!
    au bufreadpost * if line("'\"") > 0 && line("'\"") <= line("$")
                \ | exe "normal g'\"" | endif
augroup END
"} ===


"=================================================================
" auto source vimrc and jvim when saving {
"=================================================================
augroup reload_vimrc
    autocmd!
    autocmd! bufwritepost .vimrc,vimrc,.jvim.vim,jvim.vim source % " Automatic reloading of .vimrc
augroup END
"} ===


"=================================================================
" Shift-K Help support {
"=================================================================
augroup shift-K
    autocmd!
    autocmd FileType cpp set keywordprg=cppman
    autocmd FileType c set keywordprg=man\ -S3
augroup END
"} ===


"=================================================================
" UltiSnips Support and File Type Templates {
"=================================================================
if exists('g:UltiSnipsExpandTrigger')

    function! s:Try_insert(skel)
        execute 'normal! i_' . a:skel . "\<C-r>=UltiSnips#ExpandSnippet()\<CR>\<ESC>"

        if (g:ulti_expand_res == 0)
            silent! undo
        endif

        return g:ulti_expand_res
    endfunction

    function! InsertSkeleton() abort
        let l:filename = expand('%')

        " Abort on non-empty buffer or extant file
        if !(line('$') ==? 1 && getline('$') ==? '') || filereadable(l:filename)
            return
        endif

        call s:Try_insert('skel')
    endfunction

    augroup ultisnips_custom
        autocmd!
        autocmd BufNewFile * silent! call InsertSkeleton()
    augroup END

    "put utilsnips expands at top
    if exists(g:JV_autocomplete)
        if (g:JV_autocomplete=1)
            call deoplete#custom#source('ultisnips', 'rank', 1000)
        endif
    endif
endif
" } ===


"=================================================================
" Custom Start Screen {
"=================================================================
let g:ascii = [
            \ '     _       _                 _     _        ',
            \ '    (_)_   _(_)_ __ ___       (_) __| | ___   ',
            \ '    | \ \ / / | `_ ` _ \ _____| |/ _` |/ _ \  ',
            \ '    | |\ V /| | | | | | |_____| | (_| |  __/  ',
            \ '   _/ | \_/ |_|_| |_| |_|     |_|\__,_|\___|  ',
            \ '  |__/                                        ',
            \ '                                              '
            \ ]
let g:startify_custom_header = g:ascii + startify#fortune#boxed()
" http://patorjk.com/software/taag/#p=display&f=Ogre&t=jvim%0A
"} ===


