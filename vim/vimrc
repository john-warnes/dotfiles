"=================================================================
"                             vimrc                              "
"=================================================================
" vim:foldmarker={,}:foldmethod=marker:
"=================================================================
"  Revision  1122
"  Modified  Wednesday, 13 December 2017
"=================================================================
scriptencoding utf-8
setlocal keywordprg=:help

"=================================================================
" Set the Leader Key {
"=================================================================
let g:mapleader = ','
"} ===


"=================================================================
" jvim plugin options {
"=================================================================
let g:Jvim#vimopts#colorColumn        = 81 " Set long line guide
let g:Jvim#vimopts#useSystemClipboard = 1  " Try to use system clipboard

let g:Jvim#highlightRed = 'GruvboxRedBold' " Highlight to link for Red

let g:Jvim#hidden#showTrailing = 1 " Show Tailing Spaces
let g:Jvim#hidden#showEol      = 0 " Show EOL marker
let g:Jvim#hidden#showIndent   = 0 " Show indent guides when (F2 Toggles)
let g:Jvim#hidden#codePretty   = 1 " Replace some chars with alternatives (F2 Toggles)

let g:Jvim#presistentUndo#enable = 1 " Use persistent Undo
let g:Jvim#presistentUndo#dir    = expand($DOTFILES.'/vim/undo') " Where to store persistent files

let g:Jvim#folding#syntax = 1 " Enable folding by syntax for all files
                              "  NOTE: Might be slow on older systems
let g:Jvim#folding#fold   = 3 " Folding Mode on File Open
                              " 0: none default vim
                              " 1: open all folds on file open
                              " 2: close all folds on file open
                              " 3: Auto save folds and reload them
                              "  NOTE: <t><t> in normal mode to toggle folds

let g:Jvim#quickFix#enable     = 0  " Enable auto resizing of the quick fix window
let g:Jvim#quickFix#heightMin  = 3  " Limit the MIN size of the quick fix window
let g:Jvim#quickFix#heightMax  = 10 " Limit the MAX size of the quick fix window

let g:Jvim#metadata#enable     = 1 " enable metadata auto update on file save
let g:Jvim#metadata#maxSearch  = 50 " Max lines at top of file to search for meta data tags
let g:Jvim#metadata#dateFormat = '%A, %d %B %Y' " Format for template and metadata dates (man date)

let g:Jvim#comment#enable      = 1 " Allow comment and uncomment system

let g:Jvim#vimstatus#enable    = 1 " Enable vimstatus status line
"} ===


"=================================================================
" Gnome-Terminal ONLY {
"=================================================================
" <F7> cycle though mono powerline fonts
let g:powerlineFonts= [
            \'DejaVu Sans Mono for Powerline',
            \'Droid Sans Mono for Powerline',
            \'Droid Sans Mono Dotted for Powerline',
            \'Droid Sans Mono Slashed for Powerline',
            \'Fria Mono for Powerline'
            \'Go Mono for Powerline',
            \'Hack',
            \'Inconsolata for Powerline',
            \'Inconsolata-dz for Powerline',
            \'Inconsolata-g for Powerline',
            \'Literation Mono Powerline',
            \'Monofur for Powerline',
            \'Noto Mono for Powerline',
            \'NovaMono for Powerline',
            \'Roboto Mono for Powerline',
            \'Space Mono for Powerline'
            \'Ubuntu Mono derivative Powerline',
            \]

let g:font='DejaVu Sans Mono for Powerline'
let g:fontsize='11'

if has('gui_running')
    set guifont=DejaVu\ Sans\ Mono\ for\ Powerline
endif

function! GnomeTermSetFont()
    call system ("dconf write /org/gnome/terminal/legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9/font \"\'" . g:font . ' ' . g:fontsize . "\'\"")
endfunction

function! GnomeTermCycleFont()
    call add(g:powerlineFonts, g:font)
    let g:font = get(g:powerlineFonts,0,'mono')
    let g:powerlineFonts=g:powerlineFonts[1:]
    call system ("dconf write /org/gnome/terminal/legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9/font \"\'" . g:font . ' ' . g:fontsize . "\'\"")
    echom g:font
endfunction

" Cycle fonts with Gnome Terminal
nnoremap <F7> :call GnomeTermCycleFont()<CR>
"} ===


"===============================================================================
"= #############################= START Plugin =############################## {
"===============================================================================

"=================================================================
" Vim-Plug auto Install {
"=================================================================
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    augroup plugmanager
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC | q
    augroup end
endif
"} ===

call plug#begin('~/.vim/bundle')

Plug 'john-warnes/jvim'                     " Jvim
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' } " File Tree
Plug 'Xuyuanp/nerdtree-git-plugin'          " File Tree Git Support
"Plug 'vim-airline/vim-airline'              " Status Bar
Plug 'tpope/vim-fugitive'                   " :Gpush :Gdiff
Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' } " Tag listing
Plug 'jsfaint/gen_tags.vim'                 " ctags / gtags
Plug 'morhetz/gruvbox'                      " Color scheme
Plug 'christoomey/vim-tmux-navigator'       " tmux integration
Plug 'SirVer/ultisnips'                     " Snippets engine
" Plug 'honza/vim-snippets'                   " Built in snippets
Plug 'godlygeek/tabular'                    " Text aliment tool

if (has('job') && has('timers')) || has('nvim')
    Plug 'w0rp/ale'                         " async Linter
endif


" ################## COMPLETION SYSTEM ##################

" REQ: pip3 install --user neovim jedi psutil setproctitle
Plug 'roxma/nvim-completion-manager'      " nvim-completion-manager framework

" REQ: pip3 install --user msgpack-python
if !has('nvim' && has('python3'))
    Plug 'roxma/vim-hug-neovim-rpc'
endif

" Completion Plugins
Plug 'roxma/ncm-clang'          " C/C++ by Clang  REQ: clang in your $PATH
Plug 'Shougo/neco-vim'          " Vim
Plug 'Shougo/neco-syntax'       " Syntax
Plug 'Shougo/neoinclude.vim'    " include


" ################## DISABLED PLUGINS ##################
" Plug '', { 'for': 'html' }
"Plug 'lifepillar/vim-mucomplete'            " Builtin chainable autocomplete
"Plug 'ajh17/VimCompletesMe'                 " Vim Builtin autocomplete


"Plug 'tpope/vim-rhubarb'                    " :Gbrowse for github
"Plug 'vim-airline/vim-airline-themes'       " Airline themes
"Plug 'tweekmonster/startuptime.vim'         " Startup profiler :StartupTime

call plug#end()
"===============================================================================
"=###########################= END Plugin System =#############################=
"}==============================================================================


"===============================================================================
"= #### Plugin Options #### {
"===============================================================================


"=================================================================
" ipynb_notedown.vim    jupyter notebook <-> notedown   editor for vim {
"=================================================================
let g:notedown_enable=1         " Enable conversation and back by default
let g:notedown_code_match='all' " Try all, fence, or maybe language
                                " (https://github.com/aaren/notedown)


"=================================================================
" nvim-completion-manager {
"=================================================================
"set omnifunc=syntaxcomplete#Complete
set completeopt-=preview              " Disable the preview window, these use popups
set completeopt+=menuone              " Allow menu for one detect completion
set completeopt-=menu                 " Allow menu for one detect completion
"set completeopt+=noinsert
"set completeopt-=noselect
"set completeopt-=longest

let g:cm_sources_override = {
    \ 'cm-tmux': {'enable':0}
    \ }

" <S-Tab>
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" <Enter>
imap <expr> <CR>  (pumvisible() ?  "\<c-y>\<Plug>(expand_or_nl)" : "\<CR>")
imap <expr> <Plug>(expand_or_nl) (cm#completed_is_snippet() ? "\<C-Space>":"\<CR>")

" <Tab>
imap <expr> <Tab>  (pumvisible() ?  "\<Plug>(expand_or_next)" : "\<Tab>")
imap <expr> <Plug>(expand_or_next) (cm#completed_is_snippet() ? "\<c-y>\<C-Space>":"\<C-n>")
"} ===


"=================================================================
" NerdTree [Ctrl-B] {
"=================================================================
nnoremap <C-b> :NERDTreeToggle<CR>
let g:NERDTreeQuitOnOpen   = 1          " close NERDTree after  file is opened
let g:NERDTreeShowHidden   = 1          " show hidden files in NERDTree
let g:NERDTreeWinSize      = 20
let g:NERDTreeMapOpenInTab = '<ENTER>'  " Open file in newtab
let g:NERDTreeIndicatorMapCustom = {
            \ 'Modified'  : '✹', 'Staged'    : '✚',
            \ 'Untracked' : '✭', 'Renamed'   : '➜',
            \ 'Unmerged'  : '═', 'Deleted'   : '✖',
            \ 'Dirty'     : '✗', 'Clean'     : '✔︎',
            \ 'Ignored'   : '☒', 'Unknown'   : '?'
            \ }
"} ===


"=================================================================
" ALE Linter <F8> to toggle {
"=================================================================
    "let g:ale_cpp_clang_options='-std=c14 -Wall'
    "let g:ale_cpp_cppcheck_options=' --enable=style'
    "let g:ale_cpp_gcc_options='-std=c++14 -Wall'

    "define cpp linters to stop cling-check as it has errors
    let g:ale_linters = {
                \    'cpp': ['clang','gcc', 'cppcheck', 'cpplint']
                \}

    "let g:ale_sign_column_always = 1        " Always show sign column
    let g:ale_sign_error = '>'
    let g:ale_sign_warning = '-'
    let g:ale_history_log_output=1           " :ALEInfo for full output
    if exists(':ALEToggle')
        nnoremap <F8> :ALEToggle<CR>
    endif
"} ===


"=================================================================
" Airline {
"=================================================================
"let g:airline#extensions#tagbar#enabled = 0 " Tagbar plugin is very slow disable it
"
"set laststatus=2                            " Always show the status line
"let g:airline_powerline_fonts = 1           " Use Powerline fonts
"let g:airline_detect_spell    = 0           " Don't show spell and lang
""let g:airline_section_c = '%F'             " Show full Path if possable
"
"let g:airline_highlighting_cache                 = 1    " Performance cache
"let g:airline#extensions#ale#enabled             = 1    " Use ALE lint msgs
"let g:airline#extensions#tabline#enabled         = 1    " Theme the tabline
"let g:airline#extensions#tabline#show_buffers    = 0    " no buffers in tab bar
"let g:airline#extensions#tabline#show_splits     = 1
"let g:airline#extensions#tabline#show_tabs       = 1    " show tab bar
"} ===


"=================================================================
" TagBar - Requires Exuberant Ctags {
"=================================================================
let g:tagbar_width = 30             " width of tagnar window
nnoremap <C-t> :TagbarToggle<CR>    " Toggle Tagbar with Ctrl-T
"} ===


"=================================================================
" cTags {
"=================================================================
"let g:gen_tags#verbose = 1        " Give more feedback
let g:gen_tags#ctags_auto_gen = 1  " Auto generate ctags if in git
let g:gen_tags#use_cache_dir  = 1  " Put tags in git or else home cache
let g:loaded_gentags#gtags    = 1  " Disable gtags support not needed
nnoremap <Leader>t :GenCtags<CR>   " if tags didn't autogen force with <Leader>t

" Backup old style ctags generator
nnoremap <Leader>T
            \ :silent execute '!(rm tags)'<CR>
            \ :silent execute '!(ctags-exuberant -R -f %:p:h/tags *)&'<CR>
            \ :redraw!<CR>
            \ :echom 'Generated cTags'<CR>
            \ execute 'set tags=./tags;~/.vim/tags;tags;'
set tags=./tags;~/.vim/tags;tags;
"} ===


"=================================================================
" gruvbox Color Scheme {
"=================================================================
" <F5> to switch from dark to light
" <F6> to cycle the 3 levels of contrast
nnoremap <silent> <F5> :let &background = ( &background == "dark"? "light" : "dark" )<CR>
nnoremap <silent> <F6> :call GruvCycleContrast()<CR>

function! GruvCycleContrast()
    if &background ==? 'dark'
        if g:gruvbox_contrast_dark ==? 'soft'
            let g:gruvbox_contrast_dark='medium'
        elseif g:gruvbox_contrast_dark ==? 'medium'
            let g:gruvbox_contrast_dark='hard'
        elseif g:gruvbox_contrast_dark ==? 'hard'
            let g:gruvbox_contrast_dark='soft'
        endif
    else
        if g:gruvbox_contrast_light ==? 'soft'
            let g:gruvbox_contrast_light='medium'
        elseif g:gruvbox_contrast_light ==? 'medium'
            let g:gruvbox_contrast_light='hard'
        elseif g:gruvbox_contrast_light ==? 'hard'
            let g:gruvbox_contrast_light='soft'
        endif
    endif
    colorscheme gruvbox
endfunction

set background=dark            " Start with dark background theme
silent! colorscheme gruvbox    " Color scheme supports truecolor
"colorscheme default           " this is the default vim scheme
"} ===

"=================================================================
" UltiSnips  {
"=================================================================
let g:UltiSnipsExpandTrigger       = '<C-Space>'
let g:UltiSnipsJumpForwardTrigger  = '<Tab>'
let g:UltiSnipsJumpBackwardTrigger = '<none>'
let g:UltiSnipsEditSplit           = 'vertical'  " If you want :UltiSnipsEdit to split your window.

"===========  UltiSnips Templates for new files ========== {
"if exists('*UltiSnips#ExpandSnippet')
if exists('g:UltiSnipsExpandTrigger')
    function! s:Try_insert(skel)
        execute 'normal! i_' . a:skel . "\<C-r>=UltiSnips#ExpandSnippet()\<CR>"
        if (g:ulti_expand_res ==? 0)
            silent! undo
        endif
        return g:ulti_expand_res
    endfunction

    function! InsertSkeleton() abort
        let l:filename = expand('%')
        " Abort on non-empty buffer or extant file
        if !(line('$') ==? 1 && getline('$') ==? '') || filereadable(l:filename)
            return
        endif
        call s:Try_insert('skel')
    endfunction

    augroup UltiSnips_NewFileTemplate
        autocmd!
        autocmd BufNewFile * silent! call InsertSkeleton()
    augroup END
    "} ===

    "if exists('*deoplete#custom#source') && (g:Jvim#complete#engine==1)
        "silent call deoplete#custom#source('ultisnips', 'rank', -1000)
    "endif
endif
"} ===

"} === #### Plugin Options END ####


"===============================================================================
"= #### Vim Settings #### {
"===============================================================================

set ttyfast          " Under testing
set lazyredraw       " Under testing

"=================================================================
" Vim Color Support Setup {
"=================================================================
function! JvimColorInfo()
    echoerr 'TERM =' . $TERM
    echoerr 'COLORTERM =' . $COLORTERM
    echoerr 'exisit($TMUX) = ' . exists('$TMUX')
    echoerr 't_Co = ' . &t_Co
    echoerr 't_ut = ' . &t_ut
    echoerr '&t_8f = ' . &t_8f
    echoerr '&t_8b = ' . &t_8b
endfunction

if ($COLORTERM ==? 'truecolor')
    if has('termguicolors')
        set termguicolors

        if exists('$TMUX')
            let g:gruvbox_italic=0
            let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
            let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
        else
            let g:gruvbox_italic=1
        endif
        set t_ut=
    endif
else " No true color. Hope term has 256 colors
    let g:gruvbox_italic=0
    set t_Co=256
    set t_ut=
endif

if ($TERM ==? 'linux')
    " If Term is linux then we are in a 9 color environment
    let g:gruvbox_italic=0
    set t_Co=8
endif

if ($OS ==? 'OSX') && !has('nvim')
    let g:gruvbox_italic=0
    if ($TERM ==? 'screen' && $COLORTERM ==? 'truecolor')
        set t_Co=255
        set termguicolors
    endif
endif
"} ===


"=================================================================
" Vim Mouse Settings {
"=================================================================
if exists('$TMUX')
    map [1;5D <C-Left>
    map [1;5B <C-Down>
    map [1;5A <C-Up>
    map [1;5C <C-Right>
endif
"} ===


"=================================================================
" Vim Mouse Settings {
"=================================================================
"if exists('$TMUX')
    "if !has('nvim')
        "set ttymouse=xterm2
    "endif
"else
    set mouse=a
"endif
"} ===

set mouse=a
"=================================================================
" Vim Editing and Behavior {
"=================================================================
set nocompatible               " Be vim
filetype plugin indent on
if !has('nvim')
set nolangremap                " avoid mapping breaks
endif
set modeline                   " Files can use modeline(s)
set modelines=10               " Check top and bottom 10 lines for modelines(s)
set nobackup                   " No Backups
set nowritebackup              " No Backups even when editing
set noswapfile                 " Don't leave swap files
set printoptions=paper:letter,number:y,portrait:y " defualt printing
set shortmess+=aoOtT           " Abbrev. of messages (avoids 'hit enter')
set formatoptions+=cq          " Basic formatting of text and comments
set formatoptions-=t           " Don't automatically wrap text when typing
set wildmenu                   " Use the wildmenu
set wildmode=list:longest,full " Command <Tab> completion, list matches and,
                               "  complete the longest common part,
                               "  then, cycle through the matches
set wildchar=<Tab>             " Use tab to move in the menu
set backspace=2                " Set backspace
set backspace=indent,eol,start " Allow backspace over listed types
set nostartofline              " Stay on current char on page commands
set visualbell                 " Don't beep, flash the screen instead
set scrolloff=1                " Use a 1 line (horizontal) scroll offset
set sidescrolloff=10           " Use a 5 column (virtual) scroll offset
set virtualedit=onemore        " Allow you to move the cursor to the newline
set termencoding=utf-8         " Lets try using Unicode
"} ===


"=================================================================
" Vim Look and Decorations {
"=================================================================
set ruler                   " Show the line / column number of cursor
set showcmd                 " Show current command virual selected char count
set number                  " Display line number"
set numberwidth=5           " Use 5 spaces for number column"
set textwidth=79            " Width of document (used by gd)
set nowrap                  " Don't automatically wrap on load
set commentstring=\ #\ %s   " This how fold markers look
set cursorline              " Highlight the current line
set visualbell              " Visual bell instead of beeping

" Changes the shape of the cursor depending on the current mode
if has('gui_running')
    set guicursor=n-v-c:block-Cursor
    set guicursor+=i:ver100-iCursor
    set guicursor+=n-v-c:blinkon0
    "set guicursor+=i:blinkwait10
else
    let &t_SI = "\<Esc>[6 q"
    let &t_SR = "\<Esc>[4 q"
    let &t_EI = "\<Esc>[2 q"
endif
"} ===


"=================================================================
" Vim Search Options {
"=================================================================
set ignorecase              " Ignore case in search patterns
set noinfercase             " Don't ignore case in auto completion
                            "  but, do Ignore it in search patterns
set smartcase               " Don't ignore case if pattern contains it
set incsearch               " Show the 'best match so far'
set wrapscan                " Search will wrap around the file
set hlsearch                " Highlight all matches
"} ===


"=================================================================
" Vim Indent and Programming Options {
"=================================================================
"set autoindent              " Keep indent level on new line
"set nosmartindent           " Intelligent indenting for source code
set cindent                 " Intelligent indenting for source code
"set cinkeys=0{,0},!^F,o,O,e " Default is: 0{,0},0),:,0#,!^F,o,O,e
set cinoptions=N-s
set showmatch               " Show matching brackets / parenthesis
set matchtime=50            " Show matching character for 5s
set shiftwidth=4            " Spaces used for auto indents
set tabstop=4               " Set the tab width to 4
set softtabstop=4           " Spaces that a tab moves over
set expandtab               " Insert spaces when using the Tab key
set smarttab                " Allow Tab to match previous line
"} ===


"=================================================================
" Vim Mappings and Keybindings {
"=================================================================
" zM   "Close all folds
" zR   "Open all folds

" Easier moving between tabs
nnoremap <Leader>n <Esc>:tabprevious<CR>
nnoremap <Leader>m <Esc>:tabnext<CR>

" Sort visual mode selected lines
vnoremap <Leader>s :sort<CR>

nnoremap <C-n> <Esc>:nohl<CR>   " Remove highlight from search

" mac os make <FN+Arrows> work as CTRL+Arrows
if has('macunix')
    map <ESC>[5~ <C-Up>
    map <ESC>[6~ <C-Down>
    map <ESC>OH <C-Left>
    map <ESC>OF <C-Right>
endif

" Map <NUL> and <C-@> as Control-Space as it commonly is
" Allow remapping
if !has('nvim')
    imap <NUL> <C-Space>
    imap <C-@> <C-Space>
endif
"} ===


"} === #### Vim Settings END #####



"=================================================================
" Shift-K Help support {
"=================================================================
" Use <Shift-K> to lookup help for word under the cursor
augroup shift-K
    autocmd!
    autocmd FileType cpp set keywordprg=cppman
    autocmd FileType c set keywordprg=man\ -S3
    autocmd FileType python set keywordprg=manpy3
    autocmd FileType python3 set keywordprg=manpy3
augroup END
"} ===

" EOF != <= >= x^2 y^3 1^2 pi 44^2 pie
