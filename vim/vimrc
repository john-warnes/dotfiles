"=================================================================
"                             vimrc                              "
"=================================================================
"  Revision  423
"  Modified  Tuesday, 14 November 2017
"=================================================================
set encoding=utf-8
scriptencoding utf-8
setlocal foldmarker={,}
setlocal foldmethod=marker
setlocal foldcolumn=1
setlocal keywordprg=:help
"=================================================================

filetype plugin indent on
set modeline
set modelines=5

"=================================================================
" Notes {
"=================================================================
" run make without changing files on eorror and open list
"       :make! | copen
" } ===


"=================================================================
" Leader Key {
"=================================================================
" Rebind <Leader> key
" I like to have it here because it is easier to reach than the default and
" it is next to ``m`` and ``n`` which I use for navigating between tabs.
let g:mapleader = ','
"} ===


"=================================================================
" Gnome-Terminal Font Control  Note: Only Gnome-Terminal {
"=================================================================
" <F7> cycle though mono powerline fonts
let g:powerlineFonts= [
            \'DejaVu Sans Mono for Powerline',
            \'Droid Sans Mono for Powerline',
            \'Droid Sans Mono Dotted for Powerline',
            \'Droid Sans Mono Slashed for Powerline',
            \'Fria Mono for Powerline'
            \'Go Mono for Powerline',
            \'Hack',
            \'Inconsolata for Powerline',
            \'Inconsolata-dz for Powerline',
            \'Inconsolata-g for Powerline',
            \'Literation Mono Powerline',
            \'Monofur for Powerline',
            \'Noto Mono for Powerline',
            \'NovaMono for Powerline',
            \'Roboto Mono for Powerline',
            \'Space Mono for Powerline'
            \'Ubuntu Mono derivative Powerline',
            \]

let g:font='DejaVu Sans Mono for Powerline'
let g:fontsize='11'

if has('gui_running')
    set guifont=DejaVu\ Sans\ Mono\ for\ Powerline
endif

function! GnomeTermSetFont()
    call system ("dconf write /org/gnome/terminal/legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9/font \"\'" . g:font . ' ' . g:fontsize . "\'\"")
endfunction

function! GnomeTermCycleFont()
    call add(g:powerlineFonts, g:font)
    let g:font = get(g:powerlineFonts,0,'mono')
    let g:powerlineFonts=g:powerlineFonts[1:]
    call system ("dconf write /org/gnome/terminal/legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9/font \"\'" . g:font . ' ' . g:fontsize . "\'\"")
    echom g:font
endfunction

" Cycle fonts with Gnome Terminal
nnoremap <F7> :call GnomeTermCycleFont()<CR>
"} ===


"=================================================================
" Vim-Plug Plugin Manager Auto Install {
"=================================================================
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    augroup plugmanager
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC | q
    augroup end
endif
"} ===


"=================================================================
" Vim Color Support and Force {
"=================================================================
if ($COLORTERM ==? 'truecolor')
    if has('termguicolors')
        set termguicolors
    endif
    if exists('$TMUX')
        let g:gruvbox_italic=0
        set t_ut=
    else
        let g:gruvbox_italic=1
        set t_ut=
    endif
else
    " No true color. Hope term has 256 colors
    let g:gruvbox_italic=0
    if !has('nvim')
        set term=xterm-256color
    endif
    set t_Co=256
    set t_ut=
    "    set t_ut=set
    "    set t_ut=y
endif

if ($TERM ==? 'linux')
    " If Term is linux then we are in a 9 color environment
    let g:gruvbox_italic=0
    set t_Co=8
endif

if ($OS ==? 'OSX') && !has('nvim')
    let g:gruvbox_italic=0
endif
"} ===


"=================================================================
"= #######################= START Plugin =###################### {
"=================================================================
call plug#begin('~/.vim/bundle')

" Testing Comment != <= >= x^2 y^3 1^2 pi 44^2 pie    

"=================================================================
" jvim plugin options {
"=================================================================
let g:Jvim#vimopts#colorColumn        = 81 " Set long line guide
let g:Jvim#vimopts#useSystemClipboard = 1  " Try to use system clipboard

let g:Jvim#highlightRed               = 'GruvboxRedBold' " Highlight to link for Red

let g:Jvim#hidden#showTrailing        = 1  " Show Tailing Spaces
let g:Jvim#hidden#showEol             = 1  " Show EOL marker
let g:Jvim#hidden#showIndent          = 0  " Show indent guides when (F2 Toggle)
let g:Jvim#hidden#codePretty          = 1  " Replace some chars with alternatives (F2 Toggle)

let g:Jvim#presistentUndo#enable      = 0  " Use persistent Undo
let g:Jvim#presistentUndo#dir         = expand($DOTFILES.'/vim/undo') " Where to store persistent files

let g:Jvim#folding#enableSyntax       = 0 " Enable folding by syntax for all files
                                          "  NOTE: Might be slow on older systems
let g:Jvim#folding#defaultFolding     = 3 " Folding Mode
                                          " 0: none default vim
                                          " 1: open all folds on file open
                                          " 2: close all folds on file open
                                          " 3: Auto save folds and reload them
                                          "  NOTE: <t><t> in normal mode to toggle folds

let g:Jvim#quickFix#enable            = 0   " Enable auto resizing of the quick fix window
let g:Jvim#quickFix#heightMin         = 3   " Limit the MIN size of the quick fix window
let g:Jvim#quickFix#heightMax         = 10  " Limit the MAX size of the quick fix window

let g:Jvim#metadata#DateFormat        = 'A, d B Y' " Format for template and metadata dates (man date)
let g:Jvim#metadata#MaxSearch         = 50  " Max lines at top of file to search for meta data tags
let g:Jvim#metadata#UpdateMetaData    = 1   " Loaded auto updating of metadata on file save

let g:Jvim#testing#testingEnable      = 0   " loaded auto updating of metadata on file save
let g:Jvim#testing#debugEnable        = 0   " loaded auto updating of metadata on file save
Plug 'john-warnes/jvim'
"} ===


"=================================================================
" NerdTree to see files in tree mode {
"=================================================================
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }

" Activate with Ctrl-B
nnoremap <C-b> :NERDTreeToggle<CR>

let g:NERDTreeQuitOnOpen   = 0          " close NERDTree after  file is opened
let g:NERDTreeShowHidden   = 1          " show hidden files in NERDTree
let g:NERDTreeWinSize      = 20
let g:NERDTreeMapOpenInTab = '<ENTER>'  " Open file in newtab
"} ===


"=================================================================
" NerdTree git plugin {
"=================================================================
"Show git file status when browsing
Plug 'Xuyuanp/nerdtree-git-plugin'

let g:NERDTreeIndicatorMapCustom = {
            \ 'Modified'  : '✹',
            \ 'Staged'    : '✚',
            \ 'Untracked' : '✭',
            \ 'Renamed'   : '➜',
            \ 'Unmerged'  : '═',
            \ 'Deleted'   : '✖',
            \ 'Dirty'     : '✗',
            \ 'Clean'     : '✔︎',
            \ 'Ignored'   : '☒',
            \ 'Unknown'   : '?'
            \ }

"let g:NERDTreeShowIgnoredStatus = 1 "Heavy feature can be SLOW
"} ===


"=================================================================
" ALE Syntax Checking Plugin {
"=================================================================
if (has('job') && has('timers')) || has('nvim')

    Plug 'w0rp/ale'

    "let g:ale_sign_column_always = 1        " Always show sign column
    let g:ale_sign_error = '>>'
    let g:ale_sign_warning = '--'
    let g:ale_history_log_output=1           " :ALEInfo for full output

    " Write this in your vimrc file
    "let g:ale_set_loclist           = 1     " Use loclist
    "let g:ale_set_quickfix          = 1     " Use quickfix list
    "let g:ale_open_list             = 1     " Auto open the list
    "let g:ale_keep_list_window_open = 0     " Keep the list window open

    nnoremap <F8> :ALEToggle<CR>
else
"=================================================================
" Syntastic Syntax checking Plugin
"=================================================================

" Use :Erorrs to open location-list
"     :lclose :lnext and :lprevious
    Plug 'vim-syntastic/syntastic'

    "set statusline+=%#warningmsg#
    "set statusline+=%{SyntasticStatuslineFlag()}
    "set statusline+=%*

    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list            = 1
    let g:syntastic_check_on_open            = 0
    let g:syntastic_check_on_wq              = 0
    let g:syntastic_mode_map                 = {
                \ 'mode': 'active',
                \ 'passive_filetypes': ['python'] }

    nnoremap <F8> :SyntasticToggleMode<CR>
    nnoremap <C-F8> :SyntasticCheck<CR>
endif

"augroup signcolumn
"    autocmd!
"    autocmd ColorScheme Gruvbox highlight clear SignColumn
"augroup end
"} ===


"=================================================================
" Airline and TmuxLine {
"=================================================================
let g:airline#extensions#tagbar#enabled = 0 " Tagbar plugin is very slow disable it

Plug 'vim-airline/vim-airline'              " Airline plugin
Plug 'vim-airline/vim-airline-themes'       " Many Airline themes

"set noshowmode                             " Hide mode in status line below airline
set laststatus=2                            " Always show the status line
let g:airline_powerline_fonts = 1           " Use Powerline fonts
let g:airline_detect_spell    = 0           " Don't show spell and lang
"let g:airline_section_c = '%F'             " Show full Path if possable

" Themes
"let g:airline_theme='base16'
"let g:airline_theme='murmur'
"let g:airline_theme='powerlineish'

let g:airline_highlighting_cache                 = 1    " Performance cache
let g:airline#extensions#ale#enabled             = 1    " Use ALE lint msgs
let g:airline#extensions#tabline#enabled         = 1    " Theme the tabline
let airline#extensions#tabline#show_buffers      = 0

let g:airline#extensions#tabline#show_splits     = 0
let g:airline#extensions#tabline#show_tabs       = 1

"let g:airline#extensions#tabline#show_tab_nr     = 0
"let g:airline#extensions#tabline#show_tab_type   = 0
"let g:airline#extensions#tabline#close_symbol    = 'x'
"let g:airline#extensions#tabline#show_close_button = 0

let g:airline#extensions#tmuxline#enabled        = 1    " Theme tmux bar
let g:airline#extensions#tmuxline#color_template = 'normal' " make tmux mode
Plug 'edkolev/tmuxline.vim'     " airline Plugin that allows theming of tmux
"} ===


"=================================================================
" Fugitive for GIT {
"=================================================================
" Try ":Gpush :Gdiff when file in reposory is open
Plug 'tpope/vim-fugitive'
" Allow :Gbrowse for github and other github support
" Plug 'tpope/vim-rhubarb'
"} ===


"=================================================================
" Language Support Only enable if needed {
"=================================================================
"let g:C_CreateMenusDelayed = 'yes'
"let g:C_MapLeader          = ','
"Plug 'WolfgangMehner/c-support'

"let g:C_UseToolbox      = 'yes'
"let g:C_UseTool_doxygen = 'yes'
"let g:C_UseTool_cmake   = 'yes'

"let g:Bash_MapLeader    = ','
"let g:Latex_MapLeader   = ','
"let g:Latex_MapLeader   = ','
"let g:Lua_MapLeader     = ','
"let g:Perl_MapLeader    = ','
"let g:Vim_MapLeader     = ','
"let g:Python_MapLeader  = ','

"Plug 'WolfgangMehner/bash-support'
"Plug 'WolfgangMehner/latex-support'
"Plug 'WolfgangMehner/lua-support'
"Plug 'WolfgangMehner/perl-support'
"Plug 'WolfgangMehner/vim-support'
"Plug 'WolfgangMehner/python-support'
"} ===


"=================================================================
" Python mode {
"=================================================================
Plug 'python-mode/python-mode'

"load a Template for new .py files
augroup Python
    autocmd!
    autocmd BufNewFile *.py silent! 0r ~/.vim/templates/python-mode.template | cal cursor(8,4)
augroup END
"} ===


"=================================================================
" Completion Systems {
"=================================================================
set completeopt-=preview         " Disable the preview window, these use popups
let g:JV_autocomplete = get(g:, 'JV_autocomplete', 1)


let g:JV_autocomplete = 0
if (g:JV_autocomplete == 1) && has('nvim') " || ( has('job') && has('timers') && has('python3') )

    " # On GNU/Linux
    "   [sudo] find / -name libclang.so
    " # On macOS
    "   mdfind -name libclang.dylib


    if has('macunix')
        let g:deoplete#sources#clang#libclang_path='/Library/Developer/CommandLineTools/usr/lib/libclang.dylib'
        let g:deoplete#sources#clang#clang_header='/Library/Developer/CommandLineTools/usr/lib/clang'
    else
        let g:deoplete#sources#clang#libclang_path='/usr/lib/llvm-4.0/lib/libclang.so.1'
        let g:deoplete#sources#clang#clang_header='/usr/lib/llvm-4.0/lib/clang'
    endif

    if has('nvim')
        Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    else
        let g:deoplete#enable_yarp = 1
        Plug 'Shougo/deoplete.nvim'     " One
        Plug 'roxma/nvim-yarp'          " of
        Plug 'roxma/vim-hug-neovim-rpc' " this is buggy on VIM8 for linux
    endif

    Plug 'Shougo/neco-vim'
    Plug 'Shougo/neco-syntax'
    Plug 'Shougo/neoinclude.vim'

    Plug 'zchee/deoplete-clang'

    let g:deoplete#enable_at_startup = 1  " Automagically use deoplete.
    let g:deoplete#enable_smart_case = 1  " Use smart case to find matches
    "set completeopt+=noinsert            " Do not modify line inless selected
    "set completeopt-=menuone             " Disable the complete menu for a single item

    " Use tab to cycle matches
endif

if (g:JV_autocomplete == 1) && !has('nvim')
    " Plug 'ervandew/supertab'            " Super tab completion

    Plug 'ajh17/VimCompletesMe'           " Light plugin like supertab
    augroup VCM_use_dict
        autocmd!
        autocmd FileType text,markdown let b:vcm_tab_complete = 'dict'
    augroup END
endif

" Tab to move through the choices
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
"} ===


"=================================================================
" TagBar - Requires Exuberant Ctags {
"=================================================================
Plug 'majutsushi/tagbar'
let g:tagbar_width = 30             " width of tagnar window

nnoremap <C-t> :TagbarToggle<CR>    " Toggle Tagbar with Ctrl-T
" } ===


"=================================================================
" cTags {
"=================================================================
"let g:gen_tags#verbose = 1        " Give more feedback
let g:gen_tags#ctags_auto_gen = 1  " Auto generate ctags if in git
let g:gen_tags#use_cache_dir  = 0  " Put tags in git or else home cache
let g:loaded_gentags#gtags    = 1  " Disable gtags support not needed

Plug 'jsfaint/gen_tags.vim'
nnoremap <Leader>t :GenCtags<CR>   " if no autogen then force with <Leader>t

"nnoremap <Leader>t
"            \ :silent execute '!(rm tags)'<CR>
"            \ :silent execute '!(ctags-exuberant -R -f %:p:h/tags *)&'<CR>
"            \ :redraw!<CR>
"            \ :echom 'Generated cTags'<CR>
"            \ execute 'set tags=./tags;~/.vim/tags;tags;'
"set tags=./tags;~/.vim/tags;tags;
"} ===


"=================================================================
" gruvbox colorschene {
"=================================================================
Plug 'morhetz/gruvbox'
" <F5> to switch from dark to light
" <F6> to cycle the 3 levels of contrast
nnoremap <silent> <F5> :let &background = ( &background == "dark"? "light" : "dark" )<CR>
nnoremap <silent> <F6> :call GruvCycleContrast()<CR>

function! GruvCycleContrast()
    if &background ==? 'dark'
        if g:gruvbox_contrast_dark ==? 'soft'
            let g:gruvbox_contrast_dark='medium'
        elseif g:gruvbox_contrast_dark ==? 'medium'
            let g:gruvbox_contrast_dark='hard'
        elseif g:gruvbox_contrast_dark ==? 'hard'
            let g:gruvbox_contrast_dark='soft'
        endif
    else
        if g:gruvbox_contrast_light ==? 'soft'
            let g:gruvbox_contrast_light='medium'
        elseif g:gruvbox_contrast_light ==? 'medium'
            let g:gruvbox_contrast_light='hard'
        elseif g:gruvbox_contrast_light ==? 'hard'
            let g:gruvbox_contrast_light='soft'
        endif
    endif
    colorscheme gruvbox
endfunction
"} ===


"=================================================================
" TMUX integration and support {
"=================================================================
" <Ctrl + [h,j,k,l]> Move to vim panes and tmux widows
Plug 'christoomey/vim-tmux-navigator'

if exists('$TMUX')
    if !has('nvim')
        set ttymouse=xterm2
    endif
endif
"} ===


"=================================================================
" UltiSnips Code Snippets {
"=================================================================
let g:UltiSnipsExpandTrigger       = '<C-Space>'
let g:UltiSnipsJumpForwardTrigger  = '<C-Space>'
"let g:UltiSnipsJumpBackwardTrigger = '<C-S-d>'

"Use Tab in select mode is skip keeping the defualt
snoremap <Tab> <C-o>:call UltiSnips#JumpForwards()<CR>

let g:UltiSnipsEditSplit           = 'vertical'  " If you want :UltiSnipsEdit to split your window.

Plug 'SirVer/ultisnips'     " Track the engine
Plug 'honza/vim-snippets'   " Snippets are separated from the engine
"} ===


"=================================================================
" Start Screen and Session Management {
"=================================================================
" :SLoad    load a session
" :SSave    save a session
" :SDelete  delete a session
" :SClose   close current session
"let g:startify_fortune_use_unicode = 1
"let g:startify_session_persistence = 0
"let g:startify_relative_path       = 1
"let g:startify_change_to_dir       = 1
"let g:startify_update_oldfiles     = 1
"let g:startify_bookmarks           = [ {'v': '~/.vimrc'}, {'b': '~/.vim/bundle/jvim/plugin/jvim.vim'}]
" Plug 'mhinz/vim-startify'
"} ===


"=================================================================
" Tabular Text Alignment Tool {
"=================================================================
" :Tab /<REGEX>
" Example: c,c++ ``:Tab /\/\/``
" Example: csv   ``:Tab /,``
" Example: vim   ``:Tab /"``
Plug 'godlygeek/tabular'
"} ===


"=================================================================
" Vim Startup Time Profiler run  :StartupTime {
"=================================================================
" Only enable when needed
" Plug 'tweekmonster/startuptime.vim'
"} ===

"=================================================================
"=####################= END Plugin System =######################=
"=================================================================
call plug#end()
"} ===


"=================================================================
" Color Scheme {
"=================================================================
set background=dark            " Start with dark background theme

"colorscheme default           " or try the default scheme
silent! colorscheme gruvbox    " Color scheme supports truecolor
"} ===


"=================================================================
" Editing and Behavior {
"=================================================================
set nowritebackup              " only in case you don't want a backup file while editing
set noswapfile                 " no swap files
set nobackup                   " Just overwrite the file
set printoptions=paper:letter,number:y,portrait:y
set shortmess+=filmnrxoOtT     " Abbrev. of messages (avoids 'hit enter')
set formatoptions+=cq          " Basic formatting of text and comments
set formatoptions-=t           " Don't automatically wrap text when typing
set wildmenu                   " Use the wildmenu
set wildmode=list:longest,full " Command <Tab> completion, list matches and,
                               "  complete the longest common part,
                               "  then, cycle through the matches
set wildchar=<Tab>             " Use tab to move in the menu
set mouse=a                    " Use mouse in all modes
                               "  on OSX might have to press ALT and click
set backspace=2                " Set backspace
set backspace=indent,eol,start " Allow backspace over listed types
set nostartofline              " Stay on current char on page commands
set visualbell                 " Don't beep, flash the screen instead
set scrolloff=1                " Use a 1 line (horizontal) scroll offset
set sidescrolloff=10           " Use a 5 column (virtual) scroll offset
set virtualedit=onemore        " Allow you to move the cursor to the newline
set termencoding=utf-8         " Lets try using Unicode
"} ===


"=================================================================
" Editor Look and Decorations {
"=================================================================
set ruler                   " Show the line / column number of cursor
"set showcmd                 " Show the partially completed command
set number                  " Display line number"
set numberwidth=5           " Use 5 spaces for number column"
set textwidth=79            " Width of document (used by gd)
set nowrap                  " Don't automatically wrap on load
set formatoptions-=t        " Don't automatically wrap text when typing
set commentstring=\ #\ %s   " This how fold markers look
set cursorline              " Highlight the current line
set visualbell              " Visual bell instead of beeping

" Changes the shape of the cursor depending on the current mode
if has('gui_running')
    set guicursor=n-v-c:block-Cursor
    set guicursor+=i:ver100-iCursor
    set guicursor+=n-v-c:blinkon0
    "set guicursor+=i:blinkwait10
else
    let &t_SI = "\<Esc>[6 q"
    let &t_SR = "\<Esc>[4 q"
    let &t_EI = "\<Esc>[2 q"
endif
"} ===


"=================================================================
" Search {
"=================================================================
set ignorecase              " Ignore case in search patterns
set noinfercase             " Don't ignore case in auto completion
                            "  but, do Ignore it in search patterns
set smartcase               " Don't ignore case if pattern contains it
set incsearch               " Show the 'best match so far'
set wrapscan                " Search will wrap around the file
set hlsearch                " Highlight all matches
"} ===


"=================================================================
" Programming {
"=================================================================
set autoindent              " Keep indent level on new line
set nosmartindent           " Intelligent indenting for source code
set cindent                 " Intelligent indenting for source code
set cinkeys=0{,0},!^F,o,O,e " Default is: 0{,0},0),:,0#,!^F,o,O,e
set showmatch               " Show matching brackets / parenthesis
set matchtime=5             " Show matching character for .3s
" } ===


"=================================================================
" Tabs {
"=================================================================
set shiftwidth=4            " Spaces used for auto indents
set tabstop=4               " Set the tab width to 4
set softtabstop=4           " Spaces that a tab moves over
set expandtab               " Insert spaces when using the Tab key
set smarttab                " Allow Tab to match previous line
"} ===


"=================================================================
" Mappings and Keybindings {
"=================================================================
" zM   "Close all folds
" zR   "Open all folds

" Easier moving between tabs
nnoremap <Leader>n <Esc>:tabprevious<CR>
nnoremap <Leader>m <Esc>:tabnext<CR>

" Sort visual mode selected lines
vnoremap <Leader>s :sort<CR>

nnoremap <C-n> <Esc>:nohl<CR>   " Remove highlight from search
inoremap <C-n> <Esc>:nohl<CR>i  " Remove hightight from search

" mac os make <FN+Arrows> work as CTRL+Arrows
if has('macunix')
    map <ESC>[5~ <C-Up>
    map <ESC>[6~ <C-Down>
    map <ESC>OH <C-Left>
    map <ESC>OF <C-Right>
endif

" Map <NUL> and <C-@> as Control-Space as it commonly is
" Allow remapping
imap <NUL> <C-Space>
imap <C-@> <C-Space>
"} ===


"=================================================================
" Return to the last position in the file {
"=================================================================
augroup return_file_postion
    autocmd!
    au bufreadpost * if line("'\"") > 0 && line("'\"") <= line("$")
                \ | exe "normal g'\"" | endif
augroup END
"} ===


"=================================================================
" auto source vimrc and jvim.vim when saving {
"=================================================================
augroup reload_vimrc
    autocmd!
    "autocmd bufwritepost .vimrc,vimrc,.jvim.vim,jvim.vim source %
augroup END
"} ===


"=================================================================
" Shift-K Help support {
"=================================================================
" Use <Shift-K> to lookup help for word under the cursor
augroup shift-K
    autocmd!
    autocmd FileType cpp set keywordprg=cppman
    autocmd FileType c set keywordprg=man\ -S3
augroup END
"} ===


"=================================================================
" UltiSnips File Type Templates {
"=================================================================
if exists('g:UltiSnipsExpandTrigger')
    " UltiSnips Templates for new Files ===== {
    function! s:Try_insert(skel)
        execute 'normal! i_' . a:skel . "\<C-r>=UltiSnips#ExpandSnippet()\<CR>"
        if (g:ulti_expand_res ==? 0)
            silent! undo
        endif

        return g:ulti_expand_res
    endfunction

    function! InsertSkeleton() abort
        let l:filename = expand('%')

        " Abort on non-empty buffer or extant file
        if !(line('$') ==? 1 && getline('$') ==? '') || filereadable(l:filename)
            return
        endif

        call s:Try_insert('skel')
    endfunction

    augroup ultisnips_custom
        autocmd!
        autocmd BufNewFile * silent! call InsertSkeleton()
    augroup END
    "} ===

    " Put UltiSnips at the bottom of Deoplete List {
    if exists('g:JV_autocomplete') && exists('*deoplete#custom#source')
        if (g:JV_autocomplete == 1)
            silent call deoplete#custom#source('ultisnips', 'rank', -1000)
        endif
    endif
    "} ===
endif
"} ===


"=================================================================
" Custom Start Screen {
"=================================================================
if exists('g:autoload startify')
    let g:ascii = [
                \ '     _       _                 _     _        ',
                \ '    (_)_   _(_)_ __ ___       (_) __| | ___   ',
                \ '    | \ \ / / | `_ ` _ \ _____| |/ _` |/ _ \  ',
                \ '    | |\ V /| | | | | | |_____| | (_| |  __/  ',
                \ '   _/ | \_/ |_|_| |_| |_|     |_|\__,_|\___|  ',
                \ '  |__/                                        ',
                \ '                                              '
                \ ]
    let g:startify_custom_header = g:ascii + startify#fortune#boxed()
endif
" http://patorjk.com/software/taag/#p=display&f=Ogre&t=jvim%0A
"} ===

" EOF
