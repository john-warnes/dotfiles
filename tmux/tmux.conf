#
# set Zsh as your default Tmux shell
# set-option -g default-shell /bin/zsh
#
# UTF is great, let us use that
#set -g utf8
#set-window-option -g utf8 on



#set -g default-terminal "screen-256color"
#set-option -ga terminal-overrides ",screen-256color:Tc"


#use the set that matches you term
#set -g default-terminal "xterm-256color"
#set -g default-terminal \"tmux-256color\"

#set-option -ga terminal-overrides ",xterm-256color:Tc"

run-shell "tmux setenv -g TPUT_VERSION $( tput -V | cut -d ' ' -f2 | cut -d '.' -f1-2 )"

if-shell -b '[ "$(echo "$TPUT_VERSION <= 6.0" | bc)" = 1 ]' \
    "set -g default-terminal \"xterm-256color\";"

if-shell -b '[ "$(echo "$TPUT_VERSION > 6.0" | bc)" = 1 ]' \
    "set -g default-terminal \"tmux-256color\";"

set-option -ga terminal-overrides ",xterm-256color:Tc"

# Tmux uses a 'control key', let's set it to 'Ctrl-a'
# Reason: 'Ctrl-a' is easier to reach than 'Ctrl-b'
set -g prefix C-a
unbind C-b
bind C-a send-prefix

# command delay? We don't want that, make it short
set -sg escape-time 1

# Set the numbering of windows to go from 1 instead
# of 0 - silly programmers :|
set-option -g base-index 1
setw -g pane-base-index 1

# Version-specific commands [grumble, grumble]
# See: https://github.com/tmux/tmux/blob/master/CHANGES
run-shell "tmux setenv -g TMUX_VERSION $(tmux -V | cut -c 6-)"

if-shell -b '[ "$(echo "$TMUX_VERSION < 2.1" | bc)" = 1 ]' \
    "set -g mouse-select-pane on; set -g mode-mouse on; \
    set -g mouse-resize-pane on; set -g mouse-select-window on"

# In version 2.1 "mouse" replaced the previous 4 mouse options
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.1" | bc)" = 1 ]' \
    "set -g mouse on"

# UTF8 is autodetected in 2.2 onwards, but errors if explicitly set
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.2" | bc)" = 1 ]' \
    "set -g utf8 on; set -g status-utf8 on; set -g mouse-utf8 on"

# symbols to split the screen
bind | split-window -h -c '#{pane_current_path}'
bind \ split-window -h -c '#{pane_current_path}'
bind - split-window -v -c '#{pane_current_path}'
bind c new-window -c '#{pane_current_path}'


# END  = ^[[4~
# HOME = ^[[1~

# Resize Panes
bind-key -r j resize-pane -D 5
bind-key -r k resize-pane -U 5
bind-key -r h resize-pane -L 5
bind-key -r l resize-pane -R 5

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
        | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

bind-key -n C-Right if-shell "$is_vim" "send-keys C-Right"  "select-pane -L"
bind-key -n C-Down if-shell "$is_vim" "send-keys C-Down"  "select-pane -D"
bind-key -n C-Up if-shell "$is_vim" "send-keys C-Up"  "select-pane -U"
bind-key -n C-Left if-shell "$is_vim" "send-keys C-Left"  "select-pane -R"

set-option -g xterm-keys on
set-window-option -g xterm-keys on

###########################
#      Color Scheme       #
###########################
#source-file "${DOTFILES}/tmux/theme/powerline/block/blue.tmuxtheme"
source-file "${DOTFILES}/tmux/theme/default.tmuxtheme"



